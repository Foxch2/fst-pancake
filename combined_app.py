# combined_app.py

import pandas as pd
import pyodbc
import configparser
import tkinter as tk
from tkinter import filedialog, messagebox, ttk, scrolledtext
import os
from pathlib import Path
# –ò–º–ø–æ—Ä—Ç—ã –¥–ª—è DOCX
from docx import Document
from docx.shared import Cm, Pt, Inches
from docx.enum.text import WD_ALIGN_PARAGRAPH
from docx.enum.table import WD_ALIGN_VERTICAL
from docx.enum.section import WD_ORIENT
# –ò–º–ø–æ—Ä—Ç—ã –¥–ª—è QR-–∫–æ–¥–∞
import qrcode
from PIL import Image
from datetime import datetime, timedelta
import logging
import unicodedata
import re
import requests
import json
import base64
import uuid
import pytz
import smtplib
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
from email.mime.image import MIMEImage
from io import BytesIO
import pytz # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ pytz –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –≤ –Ω–∞—á–∞–ª–µ —Ñ–∞–π–ª–∞
                        

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è ---
LOG_FILE = "combined_app.log"
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s [%(levelname)s] %(funcName)s:%(lineno)d - %(message)s",
    handlers=[
        logging.FileHandler(LOG_FILE, encoding='utf-8'),
        logging.StreamHandler()
    ]
)

# --- –§—É–Ω–∫—Ü–∏—è –æ—á–∏—Å—Ç–∫–∏ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è PDF/DOCX ---
def clean_text_for_pdf(text):
    if not isinstance(text, str):
        return text
    # –£–¥–∞–ª—è–µ–º –Ω–µ–≤–∏–¥–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã (control characters)
    visible_chars = ''.join(char for char in text if unicodedata.category(char)[0] != 'C')
    # –ü—Ä–∏–≤–æ–¥–∏–º –∫ NFC (–∫–∞–Ω–æ–Ω–∏—á–µ—Å–∫–∞—è —Ñ–æ—Ä–º–∞ Unicode)
    cleaned = unicodedata.normalize('NFC', visible_chars)
    # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
    cleaned = re.sub(r'\s+', ' ', cleaned).strip()
    return cleaned



# --- –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ ---
def load_config(config_file="conf.ini"):
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ INI-—Ñ–∞–π–ª–∞.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏.
    """
    if not os.path.exists(config_file):
        error_msg = f"–§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ {config_file} –Ω–µ –Ω–∞–π–¥–µ–Ω."
        logging.error(error_msg)
        raise FileNotFoundError(error_msg)

    config = configparser.ConfigParser()
    # config.optionxform = str # –û—Å—Ç–∞–≤–ª—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ (–∫–ª—é—á–∏ –≤ –Ω–∏–∂–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ)

    try:
        config.read(config_file, encoding='utf-8')
    except Exception as e:
        error_msg = f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ {config_file}: {e}"
        logging.error(error_msg)
        raise

    # --- –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö —Å–µ–∫—Ü–∏–π ---
    required_sections = ['DATABASE', 'YOOCASSA', 'MAIL']
    for section in required_sections:
        if section not in config:
            error_msg = f"–°–µ–∫—Ü–∏—è [{section}] –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ {config_file}."
            logging.error(error_msg)
            raise KeyError(error_msg)

    # --- –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–µ–∫—Ü–∏–π ---
    try:
        # 1. DATABASE
        db_section = config['DATABASE']
        # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç—Ä–æ–∫–æ–≤–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è
        def get_str_option(section, key, default=''):
            value = section.get(key, default)
            # configparser –æ–±—ã—á–Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫–∏, –Ω–æ –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
            return str(value).strip() if value is not None else default

        db_config = {
            'server': get_str_option(db_section, 'server'),
            'database': get_str_option(db_section, 'database'),
            'driver': get_str_option(db_section, 'driver'),
            # –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ auth_mode
            'auth_mode': get_str_option(db_section, 'auth_mode').strip().lower(),
            'username': get_str_option(db_section, 'username'),
            'password': get_str_option(db_section, 'password'),
        }

        # 2. YOOCASSA
        yookassa_section = config['YOOCASSA']
        yookassa_config = {
            'shop_id': get_str_option(yookassa_section, 'shop_id').strip(),
            'secret_key': get_str_option(yookassa_section, 'secret_key').strip(),
            # invoice_lifetime_hours –±–æ–ª—å—à–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è, –Ω–æ –º–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
            # 'invoice_lifetime_hours': int(yookassa_section.get('invoice_lifetime_hours', 168)),
            'vat_code': int(yookassa_section.get('vat_code', 4)),
            'tax_system_code': int(yookassa_section.get('tax_system_code', 1)),
        }

        # 3. MAIL
        mail_section = config['MAIL']
        mail_config = {
            'smtp_server': get_str_option(mail_section, 'smtp_server').strip(),
            'smtp_port': int(mail_section.get('smtp_port', 25)),
            'use_tls': get_str_option(mail_section, 'use_tls').strip().lower() in ['true', '1', 'yes', 'on'],
            'sender_email': get_str_option(mail_section, 'sender_email').strip(),
            'sender_password': get_str_option(mail_section, 'sender_password').strip(),
            'sender_name': get_str_option(mail_section, 'sender_name', 'No Reply').strip(),
        }

        # 4. OPTIONS (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞—è —Å–µ–∫—Ü–∏—è)
        options_config = {'encoding': 'utf-8', 'MAXWeight': 0} # –ó–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        if 'OPTIONS' in config:
            options_section = config['OPTIONS']
            options_config['encoding'] = get_str_option(options_section, 'encoding', 'utf-8')
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ MAXWeight
            max_weight_str = get_str_option(options_section, 'MAXWeight', '0')
            try:
                options_config['MAXWeight'] = int(max_weight_str)
                if options_config['MAXWeight'] < 0:
                     logging.warning(f"–ó–Ω–∞—á–µ–Ω–∏–µ MAXWeight –≤ [OPTIONS] –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ ({options_config['MAXWeight']}), —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –≤ 0.")
                     options_config['MAXWeight'] = 0
            except ValueError:
                logging.warning(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ MAXWeight='{max_weight_str}' –≤ [OPTIONS], –∏—Å–ø–æ–ª—å–∑—É—é 0 (–±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π).")
                options_config['MAXWeight'] = 0
        else:
            logging.info("–°–µ–∫—Ü–∏—è [OPTIONS] –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏, –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.")

    except Exception as processing_error:
        error_msg = f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–µ–∫—Ü–∏–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {processing_error}"
        logging.error(error_msg, exc_info=True) # exc_info=True –¥–ª—è –ø–æ–ª–Ω–æ–π —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∏
        raise # –ü–æ–≤—Ç–æ—Ä–Ω–æ –≤—ã–∑—ã–≤–∞–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ

    logging.info("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞.")
    return {
        'DATABASE': db_config,
        'YOOCASSA': yookassa_config,
        'MAIL': mail_config,
        'OPTIONS': options_config
    }



# --- –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î ---
def connect_to_db(db_config):
    try:
        conn_str = (
            f"DRIVER={{{db_config['driver']}}};"
            f"SERVER={db_config['server']};"
            f"DATABASE={db_config['database']};"
        )
        if db_config['auth_mode'] == 'windows':
            conn_str += "Trusted_Connection=yes;"
        else:
            conn_str += f"UID={db_config['username']};PWD={db_config['password']};"

        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        conn = pyodbc.connect(conn_str, autocommit=False)
        logging.info("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.")
        return conn
    except Exception as e:
        error_msg = f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}"
        logging.error(error_msg)
        return None

# --- –ö–ª–∞—Å—Å –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è ---
class CombinedApp:
    def __init__(self, root):
        logging.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...")
        self.root = root
        self.root.title("üì¶ –°–∏—Å—Ç–µ–º–∞ –∑–∞–∫–∞–∑–æ–≤ –∏ —Å—á–µ—Ç–æ–≤")
        self.root.geometry("800x900")
        self.root.resizable(True, True)

        self.conn = None
        self.csv_filename = "–∑–∞–∫–∞–∑"
        self.config = None

        # --- –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ ---
        try:
            self.config = load_config()
        except Exception as e:
            logging.critical(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
            messagebox.showerror("‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:\n{e}")
            return

        # --- –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ ---
        logging.info("–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ...")
        self.conn = connect_to_db(self.config['DATABASE'])
        if not self.conn:
            logging.critical("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –ë–î –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ.")
            # messagebox.showerror("‚ùå –û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ conf.ini.")

        # --- –°–æ–∑–¥–∞–Ω–∏–µ –≤–∫–ª–∞–¥–æ–∫ ---
        self.notebook = ttk.Notebook(self.root)
        self.notebook.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)

        # –í–∫–ª–∞–¥–∫–∞ –∑–∞–∫–∞–∑–æ–≤
        self.orders_frame = ttk.Frame(self.notebook)
        self.notebook.add(self.orders_frame, text="üì¶ –ó–∞–∫–∞–∑—ã")
        self.create_orders_widgets()

        # –í–∫–ª–∞–¥–∫–∞ —Å—á–µ—Ç–æ–≤
        self.bills_frame = ttk.Frame(self.notebook)
        self.notebook.add(self.bills_frame, text="üí≥ –°—á–µ—Ç–∞")
        self.create_bills_widgets()

        # --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è GUI ---
        self.init_gui_state()

        logging.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")

    def init_gui_state(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ GUI"""
        if self.conn:
            # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞ –≤–∫–ª–∞–¥–∫–µ –∑–∞–∫–∞–∑–æ–≤
            self.btn_load.config(state=tk.NORMAL)
            self.btn_print.config(state=tk.NORMAL)
            self.load_existing_loads()
            
            # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞ –≤–∫–ª–∞–¥–∫–µ —Å—á–µ—Ç–æ–≤
            self.btn_get_info.config(state=tk.NORMAL)
            yookassa_config = self.config.get('YOOCASSA', {})
            shop_id = yookassa_config.get('shop_id', '')
            secret_key = yookassa_config.get('secret_key', '')
            self.btn_auto_create.config(
                state=tk.NORMAL if shop_id and secret_key else tk.DISABLED
            )
        else:
            # –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞ –æ–±–µ–∏—Ö –≤–∫–ª–∞–¥–∫–∞—Ö
            self.btn_load.config(state=tk.DISABLED)
            self.btn_print.config(state=tk.DISABLED)
            self.btn_get_info.config(state=tk.DISABLED, text="üö´ –ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î")
            self.btn_auto_create.config(state=tk.DISABLED, text="üö´ –ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î")
            
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ API –ÆKassa
        yookassa_config = self.config.get('YOOCASSA', {})
        shop_id = yookassa_config.get('shop_id', '')
        secret_key = yookassa_config.get('secret_key', '')
        if not shop_id or not secret_key:
            self.api_status_label.config(text="‚ùå API –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω", foreground="red")
        else:
            self.api_status_label.config(text="‚úÖ API –Ω–∞—Å—Ç—Ä–æ–µ–Ω", foreground="green")

    # ==================== –§–£–ù–ö–¶–ò–ò –î–õ–Ø –ó–ê–ö–ê–ó–û–í ====================
    
    def create_orders_widgets(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –¥–ª—è –≤–∫–ª–∞–¥–∫–∏ –∑–∞–∫–∞–∑–æ–≤"""
        container = ttk.Frame(self.orders_frame)
        container.pack(fill=tk.BOTH, expand=True, padx=20, pady=20)

        self.label = tk.Label(container, text="–ó–∞–≥—Ä—É–∑–∫–∞ –∏ –ø–µ—á–∞—Ç—å –∑–∞–∫–∞–∑–æ–≤", font=("Arial", 16))
        self.label.pack(pady=10)

        self.btn_load = tk.Button(container, text="üìÇ –ó–∞–≥—Ä—É–∑–∏—Ç—å CSV", command=self.load_csv, width=40, height=2, state=tk.DISABLED)
        self.btn_load.pack(pady=5)

        tk.Label(container, text="–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–≥—Ä—É–∑–∫—É –¥–ª—è –ø–µ—á–∞—Ç–∏:", font=("Arial", 12)).pack(pady=5)
        self.combo_loads = ttk.Combobox(container, width=60, state="readonly", height=20)
        self.combo_loads.pack(pady=5)

        self.btn_print = tk.Button(
            container,
            text="üñ®Ô∏è –†–∞—Å–ø–µ—á–∞—Ç–∞—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—É—é –∑–∞–≥—Ä—É–∑–∫—É",
            command=self.print_selected_load,
            width=40,
            height=2,
            state=tk.DISABLED
        )
        self.btn_print.pack(pady=5)

        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        if self.conn:
            tk.Label(container, text="‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ", fg="green").pack(pady=5)
        else:
            tk.Label(container, text="‚ùå –ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î", fg="red").pack(pady=5)

    def load_existing_loads(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∑–∞–≥—Ä—É–∑–æ–∫ –∏–∑ –ë–î"""
        if not self.conn:
            return
        try:
            query = """
                SELECT DISTINCT LoadedID, LoadedName
                FROM Orders
                WHERE LoadedID IS NOT NULL
                ORDER BY LoadedID DESC
            """
            df = pd.read_sql(query, self.conn)
            if not df.empty:
                loads = [f"{row['LoadedID']} - {row['LoadedName']}" for _, row in df.iterrows()]
                self.combo_loads['values'] = loads
                if loads:
                    self.combo_loads.current(0)
            else:
                self.combo_loads['values'] = []
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø–∏—Å–∫–∞ –∑–∞–≥—Ä—É–∑–æ–∫: {e}")

    def load_csv(self):
        if not self.conn:
            messagebox.showwarning("‚ö†Ô∏è", "–°–Ω–∞—á–∞–ª–∞ –ø–æ–¥–∫–ª—é—á–∏—Ç–µ—Å—å –∫ –ë–î.")
            return

        file_path = filedialog.askopenfilename(
            title="–í—ã–±–µ—Ä–∏—Ç–µ CSV-—Ñ–∞–π–ª",
            filetypes=[("CSV files", "*.csv"), ("All files", "*.*")]
        )
        if not file_path:
            return

        self.csv_filename = Path(file_path).stem
        loaded_id = datetime.now().strftime("%d.%m.%Y-%H.%M.%S")
        logging.info(f"–ó–∞–≥—Ä—É–∑–∫–∞: ID={loaded_id}, —Ñ–∞–π–ª={file_path}")

        try:
            df = pd.read_csv(file_path, dtype=str, encoding='utf-8', on_bad_lines='skip', header=0)
            df.columns = df.columns.str.strip()

            # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ
            column_mapping = {
                "–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞": "OrderID",
                "–ò–º—è": "Name",
                "email": "Email",
                "–¢–∞–±–µ–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä": "EmployeeID",
                "–¢–µ–ª–µ—Ñ–æ–Ω": "Phone",
                "–î–æ—Å—Ç–∞–≤–∫–∞": "DeliveryPoint",
                "GRD –∫–æ–¥": "GRDCode",
                "–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ": "ProductName",
                "–í–µ—Å –∫–µ–π—Å–∞, –ë—Ä—É—Ç—Ç–æ/–≥": "CaseWeight",
                "–¶–µ–Ω–∞": "Price",
                "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ": "Quantity",
                "–û–±—â–∏–π –≤–µ—Å, –ë—Ä—É—Ç—Ç–æ/–≥": "TotalWeight",
                "–°—É–º–º–∞": "TotalAmount"
            }
            df = df.rename(columns=column_mapping)

            # –ü—Ä–∏–≤–µ–¥–µ–Ω–∏–µ —Ç–∏–ø–æ–≤
            numeric_cols = ['OrderID', 'EmployeeID', 'CaseWeight', 'Price', 'Quantity', 'TotalWeight', 'TotalAmount']
            for col in numeric_cols:
                if col in df.columns:
                    df[col] = pd.to_numeric(df[col], errors='coerce')
            df = df.where(pd.notnull(df), None)

            # –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ "–ò–¢–û–ì–û"
            if 'OrderID' in df.columns:
                df = df.dropna(subset=["OrderID"])
                df = df[df["OrderID"] != "–ò–¢–û–ì–û"]

            # === –ü–†–û–í–ï–†–ö–ê –î–£–ë–õ–ò–ö–ê–¢–û–í: –¢–æ–ª—å–∫–æ –ø–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º OrderID –≤ –ë–î ===
            cursor_check = self.conn.cursor()
            cursor_check.execute("SELECT OrderID FROM Orders")
            # –°–æ–∑–¥–∞–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö OrderID –∏–∑ –ë–î
            existing_order_ids = {row[0] for row in cursor_check.fetchall() if row[0] is not None}
            logging.debug(f"–ù–∞–π–¥–µ–Ω–æ {len(existing_order_ids)} —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∑–∞–∫–∞–∑–æ–≤ –≤ –ë–î.")

            # –°–æ–∑–¥–∞–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–æ OrderID –∏–∑ –∑–∞–≥—Ä—É–∂–∞–µ–º–æ–≥–æ —Ñ–∞–π–ª–∞
            # df['OrderID'] —É–∂–µ —á–∏—Å–ª–æ–≤–æ–π –±–ª–∞–≥–æ–¥–∞—Ä—è pd.to_numeric
            file_order_ids = set(df['OrderID'].dropna().astype(int))
            logging.debug(f"–ù–∞–π–¥–µ–Ω–æ {len(file_order_ids)} –∑–∞–∫–∞–∑–æ–≤ –≤ —Ñ–∞–π–ª–µ.")

            # –ù–∞—Ö–æ–¥–∏–º –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ - –¥—É–±–ª–∏–∫–∞—Ç—ã
            duplicate_order_ids = file_order_ids & existing_order_ids
            new_order_ids = file_order_ids - duplicate_order_ids

            if duplicate_order_ids:
                duplicates = [f"–∑–∞–∫–∞–∑ ‚Ññ {order_id} –±—ã–ª –∑–∞–≥—Ä—É–∂–µ–Ω —Ä–∞–Ω–µ–µ" for order_id in sorted(duplicate_order_ids)]
                msg = "–°–ª–µ–¥—É—é—â–∏–µ –∑–∞–∫–∞–∑—ã —É–∂–µ –±—ã–ª–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã:\n" + "\n".join(duplicates)
                messagebox.showinfo("‚ÑπÔ∏è –ü–æ–≤—Ç–æ—Ä—ã", msg)
                logging.info(f"–ù–∞–π–¥–µ–Ω–æ {len(duplicate_order_ids)} –¥—É–±–ª–∏–∫–∞—Ç–æ–≤.")

            if not new_order_ids:
                messagebox.showinfo("‚ÑπÔ∏è", "–ù–µ—Ç –Ω–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏.")
                return

            # –§–∏–ª—å—Ç—Ä—É–µ–º DataFrame, –æ—Å—Ç–∞–≤–ª—è—è —Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã
            new_orders = df[df['OrderID'].isin(new_order_ids)]
            logging.info(f"–í—ã–±—Ä–∞–Ω–æ {len(new_orders)} —Å—Ç—Ä–æ–∫ –¥–ª—è –Ω–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤ ({len(new_order_ids)} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤).")

            # --- –í–°–¢–ê–í–ö–ê –ù–û–í–´–• –ó–ê–ö–ê–ó–û–í ---
            cursor = self.conn.cursor()
            inserted = 0
            for _, row in new_orders.iterrows():
                # –û—á–∏—â–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –ø–æ–ª—è –ø–µ—Ä–µ–¥ –≤—Å—Ç–∞–≤–∫–æ–π
                clean_row = [
                    clean_text_for_pdf(val) if isinstance(val, str) else val for val in row
                ]
                cursor.execute("""
                    INSERT INTO Orders (OrderID, Name, Email, EmployeeID, Phone, DeliveryPoint,
                                        GRDCode, ProductName, CaseWeight, Price, Quantity, TotalWeight, TotalAmount,
                                        LoadedID, LoadedName)
                    VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
                """, tuple(clean_row) + (loaded_id, self.csv_filename))
                inserted += 1
            self.conn.commit()

            # === –ù–ê–ß–ê–õ–û: –ó–∞–≥—Ä—É–∑–∫–∞ –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤ —Ç–∞–±–ª–∏—Ü—É bills ===
            try:
                # –ê–≥—Ä–µ–≥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –Ω–æ–≤—ã–º –∑–∞–∫–∞–∑–∞–º –∏–∑ new_orders DataFrame
                # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ OrderID, Name, Email –∏ —Å—É–º–º–∏—Ä—É–µ–º Price * Quantity –¥–ª—è –∫–∞–∂–¥–æ–π —Å—Ç—Ä–æ–∫–∏
                aggregated_data = new_orders.groupby(['OrderID', 'Name', 'Email']).apply(
                    lambda group: pd.Series({
                        'total_amount': (group['Price'] * group['Quantity']).sum()
                    })
                ).reset_index()

                # –î–æ–±–∞–≤–ª—è–µ–º loaded_id –∫–æ –≤—Å–µ–º —Å—Ç—Ä–æ–∫–∞–º
                aggregated_data['loaded_id'] = loaded_id

                # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏
                # –í—ã–±–∏—Ä–∞–µ–º –Ω—É–∂–Ω—ã–µ —Å—Ç–æ–ª–±—Ü—ã –∏ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å–ø–∏—Å–æ–∫ –∫–æ—Ä—Ç–µ–∂–µ–π
                bill_records = aggregated_data[
                    ['OrderID', 'Name', 'Email', 'total_amount', 'loaded_id']
                ].apply(lambda row: (
                    int(row['OrderID']),
                    clean_text_for_pdf(row['Name']),
                    clean_text_for_pdf(row['Email']),
                    float(row['total_amount']),
                    row['loaded_id']
                ), axis=1).tolist()

                # –í—Å—Ç–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ —Ç–∞–±–ª–∏—Ü—É bills
                cursor_bills = self.conn.cursor()
                insert_query = """
                    INSERT INTO bills (order_id_int, name, email, total_amount, loaded_id, status)
                    VALUES (?, ?, ?, ?, ?, 'pending')
                """
                if bill_records: # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏
                    cursor_bills.executemany(insert_query, bill_records)
                    self.conn.commit()
                    logging.info(f"–í —Ç–∞–±–ª–∏—Ü—É 'bills' –¥–æ–±–∞–≤–ª–µ–Ω–æ {len(bill_records)} –∑–∞–ø–∏—Å–µ–π.")
                else:
                    logging.info("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ —Ç–∞–±–ª–∏—Ü—É 'bills'.")
            except Exception as e:
                error_msg = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –≤ —Ç–∞–±–ª–∏—Ü—É 'bills': {e}"
                logging.error(error_msg)
                # –ú–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å, –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –ª–∏ –æ—à–∏–±–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å
                # messagebox.showerror("‚ùå –û—à–∏–±–∫–∞", error_msg)
                # –î–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏ –ª—É—á—à–µ –ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å –∏ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–π –ø–æ—Ç–æ–∫
            # === –ö–û–ù–ï–¶: –ó–∞–≥—Ä—É–∑–∫–∞ –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤ —Ç–∞–±–ª–∏—Ü—É bills ===


            messagebox.showinfo("‚úÖ", f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {inserted} –Ω–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤.\nID: {loaded_id}")
            logging.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {inserted} –∑–∞–∫–∞–∑–æ–≤ —Å LoadedID={loaded_id}")

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫
            self.load_existing_loads()

        except Exception as e:
            error_msg = f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ CSV: {e}"
            logging.error(error_msg)
            messagebox.showerror("‚ùå –û—à–∏–±–∫–∞", error_msg)

    def print_selected_load(self):
        """–ü–µ—á–∞—Ç—å DOCX –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏, —Ç–æ–ª—å–∫–æ –æ–ø–ª–∞—á–µ–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã."""
        selection = self.combo_loads.get()
        if not selection:
            messagebox.showwarning("‚ö†Ô∏è", "–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–≥—Ä—É–∑–∫—É –¥–ª—è –ø–µ—á–∞—Ç–∏.")
            return

        # –ò–∑–≤–ª–µ–∫–∞–µ–º LoadedID –∏–∑ —Å—Ç—Ä–æ–∫–∏ –≤—ã–±–æ—Ä–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä, "13.08.2025-10.00.00 - Orders_2025-08-11"
        parts = selection.split(" - ", 1) # –†–∞–∑–¥–µ–ª—è–µ–º –º–∞–∫—Å–∏–º—É–º –Ω–∞ –¥–≤–µ —á–∞—Å—Ç–∏
        if not parts:
            messagebox.showerror("‚ùå –û—à–∏–±–∫–∞", "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏.")
            return

        loaded_id = parts[0]
        loaded_name = parts[1] if len(parts) > 1 else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
        logging.info(f"–ü–µ—á–∞—Ç—å –∑–∞–≥—Ä—É–∑–∫–∏: ID={loaded_id}, –∏–º—è={loaded_name}")

        try:
            # === –®–ê–ì 1: –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –û–ü–õ–ê–ß–ï–ù–ù–´–• –∑–∞–∫–∞–∑–æ–≤ (order_id_int) –∏–∑ —Ç–∞–±–ª–∏—Ü—ã `bills` ===
            query_paid_bills = """
                SELECT order_id_int
                FROM bills
                WHERE loaded_id = ? AND status = 'succeeded'
            """
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º read_sql —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
            df_paid_bills = pd.read_sql(query_paid_bills, self.conn, params=[loaded_id])

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –æ–ø–ª–∞—á–µ–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã
            if df_paid_bills.empty:
                messagebox.showinfo("‚ÑπÔ∏è", "–í –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–µ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º 'succeeded'. –ü–µ—á–∞—Ç—å –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞.")
                logging.info(f"–ù–µ—Ç –æ–ø–ª–∞—á–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ {loaded_id}.")
                return

            # –°–æ–∑–¥–∞–µ–º –∫–æ—Ä—Ç–µ–∂ order_id_int –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
            # –û—á–µ–Ω—å –≤–∞–∂–Ω–æ –ø—Ä–∏–≤–µ—Å—Ç–∏ –∫ int –∏ —É–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ –Ω–µ—Ç None
            order_ids_paid_set = set(df_paid_bills['order_id_int'].dropna().astype(int))
            if not order_ids_paid_set:
                 messagebox.showinfo("‚ÑπÔ∏è", "–ù–µ –Ω–∞–π–¥–µ–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ ID –æ–ø–ª–∞—á–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤.")
                 logging.warning(f"–ù–µ –Ω–∞–π–¥–µ–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ ID –æ–ø–ª–∞—á–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ {loaded_id}.")
                 return

            order_ids_paid_tuple = tuple(order_ids_paid_set)
            placeholders = ','.join('?' * len(order_ids_paid_tuple))

            # === –®–ê–ì 2: –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª–∏ –¢–û–õ–¨–ö–û –æ–ø–ª–∞—á–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã `Orders` ===
            query_orders = """
                SELECT OrderID, Name, Email, Phone,DeliveryPoint, ProductName, Quantity, Price, TotalWeight
                FROM Orders
                WHERE LoadedID = ? AND OrderID IN ({})
                ORDER BY OrderID, ProductName -- –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∏–º–µ–Ω–∏ —Ç–æ–≤–∞—Ä–∞ –¥–ª—è –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏
                """.format(placeholders)
            # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: loaded_id + —Å–ø–∏—Å–æ–∫ order_id_int
            params_orders = [loaded_id] + list(order_ids_paid_tuple)
            df_orders_paid = pd.read_sql(query_orders, self.conn, params=params_orders)

            if df_orders_paid.empty:
                # –¢–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–∏ –≤–æ–∑–º–æ–∂–Ω–æ, –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –≤ Orders –±—ã–ª–∏ —É–¥–∞–ª–µ–Ω—ã, –Ω–æ bills –æ—Å—Ç–∞–ª—Å—è
                messagebox.showinfo("‚ÑπÔ∏è", "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ –æ–ø–ª–∞—á–µ–Ω–Ω—ã–º –∑–∞–∫–∞–∑–∞–º –¥–ª—è –ø–µ—á–∞—Ç–∏ (–¥–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã).")
                logging.warning(f"–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ –æ–ø–ª–∞—á–µ–Ω–Ω—ã–º –∑–∞–∫–∞–∑–∞–º –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ {loaded_id} (–¥–µ—Ç–∞–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã).")
                return

            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            # –ó–∞–º–µ–Ω—è–µ–º —Ç–æ—á–∫–∏ –≤ loaded_id –Ω–∞ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
            safe_loaded_id = loaded_id.replace('.', '_')
            docx_filename = f"–ó–∞–∫–∞–∑—ã_{safe_loaded_id}_{timestamp}.docx"

            # === –®–ê–ì 3: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è DOCX ===
            doc = Document()
            # === –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–ª—å–±–æ–º–Ω–æ–π –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–∏ –∏ –ø–æ–ª–µ–π ===
            section = doc.sections[0]
            section.orientation = WD_ORIENT.LANDSCAPE
            # A4 –≤ –∞–ª—å–±–æ–º–Ω–æ–π –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–∏: 297 –º–º x 210 –º–º (~11.69 x 8.27 –¥—é–π–º–æ–≤)
            section.page_width = Cm(29.7)
            section.page_height = Cm(21.0)
            section.top_margin = Cm(1.0)
            section.bottom_margin = Cm(1.0)
            section.left_margin = Cm(1.0)
            section.right_margin = Cm(1.0)
            section.header_distance = Cm(0.5)
            section.footer_distance = Cm(0.5)

            # --- –®—Ä–∏—Ñ—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é ---
            style = doc.styles['Normal']
            font = style.font
            font.name = 'Times New Roman'
            font.size = Pt(12)

            # --- –ù–∏–∂–Ω–∏–π –∫–æ–ª–æ–Ω—Ç–∏—Ç—É–ª (–¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è –æ–¥–∏–Ω —Ä–∞–∑, –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –Ω–∞ –≤—Å–µ—Ö —Å—Ç—Ä–∞–Ω–∏—Ü–∞—Ö) ---
            footer = section.footer
            p_footer = footer.paragraphs[0] if footer.paragraphs else footer.add_paragraph()
            p_footer.text = f"–§–∞–π–ª –∑–∞–≥—Ä—É–∑–∫–∏: {loaded_name} | –î–∞—Ç–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {loaded_id} | –î–∞—Ç–∞ –ø–µ—á–∞—Ç–∏: {datetime.now().strftime('%d.%m.%Y %H:%M')}"
            p_footer.alignment = WD_ALIGN_PARAGRAPH.CENTER
            run_footer = p_footer.runs[0]
            run_footer.font.size = Pt(10)

            # --- –î–ª—è –∫–∞–∂–¥–æ–≥–æ –æ–ø–ª–∞—á–µ–Ω–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞ ---
            # ... (—Ü–∏–∫–ª for –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è) ...
            for order_id, group in df_orders_paid.groupby('OrderID'):
                order_id_int = int(order_id)
                
                # --- –ò–ó–ú–ï–ù–ï–ù–û: –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–∞, –≤–∫–ª—é—á–∞—è DeliveryPoint ---
                # –î–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞ (–±–µ—Ä–µ–º –∏–∑ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–∏ –≥—Ä—É–ø–ø—ã, —Ç–∞–∫ –∫–∞–∫ –æ–Ω–∏ –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ –¥–ª—è –æ–¥–Ω–æ–≥–æ OrderID)
                name = clean_text_for_pdf(group.iloc[0]['Name']) if pd.notna(group.iloc[0]['Name']) else "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
                email = clean_text_for_pdf(group.iloc[0]['Email']) if pd.notna(group.iloc[0]['Email']) else "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
                phone = clean_text_for_pdf(group.iloc[0]['Phone']) if pd.notna(group.iloc[0]['Phone']) else "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
                # --- –ù–û–í–û–ï: –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–æ—á–∫–∏ –¥–æ—Å—Ç–∞–≤–∫–∏ ---
                delivery_point = clean_text_for_pdf(group.iloc[0]['DeliveryPoint']) if pd.notna(group.iloc[0]['DeliveryPoint']) else "–ù–µ —É–∫–∞–∑–∞–Ω–∞"
                # --- –ö–û–ù–ï–¶: –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–æ—á–∫–∏ –¥–æ—Å—Ç–∞–≤–∫–∏ ---

                # --- –ù–û–í–û–ï: –†–∞—Å—á–µ—Ç –æ–±—â–µ–≥–æ –≤–µ—Å–∞ –∑–∞–∫–∞–∑–∞ ---
                # –°—É–º–º–∏—Ä—É–µ–º TotalWeight –ø–æ –≤—Å–µ–º —Å—Ç—Ä–æ–∫–∞–º –æ–¥–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞
                total_order_weight = group['TotalWeight'].sum() if 'TotalWeight' in group.columns else 0.0
                # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ —ç—Ç–æ —á–∏—Å–ª–æ –∏ –æ–±—Ä–∞–±–æ—Ç–∞–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ NaN
                if pd.isna(total_order_weight):
                    total_order_weight = 0.0
                # --- –ö–û–ù–ï–¶: –†–∞—Å—á–µ—Ç –æ–±—â–µ–≥–æ –≤–µ—Å–∞ –∑–∞–∫–∞–∑–∞ ---

                # --- –ù–û–í–û–ï: –†–∞—Å—á–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ª–∏—Å—Ç–æ–≤ ---
                num_sheets = 1
                if self.config['OPTIONS'].get('MAXWeight', 0) > 0 and total_order_weight > 0:
                    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥—É–ª—å math, –µ—Å–ª–∏ –µ—â–µ –Ω–µ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –≤–≤–µ—Ä—Ö—É —Ñ–∞–π–ª–∞
                    import math
                    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–∏—Å—Ç–æ–≤, –æ–∫—Ä—É–≥–ª—è—è –≤–≤–µ—Ä—Ö
                    max_weight = self.config['OPTIONS']['MAXWeight']
                    num_sheets = math.ceil(total_order_weight / max_weight)
                # --- –ö–û–ù–ï–¶: –†–∞—Å—á–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ª–∏—Å—Ç–æ–≤ ---

                # --- –ù–û–í–û–ï: –¶–∏–∫–ª –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –ª–∏—Å—Ç–æ–≤ ---
                for sheet_number in range(1, num_sheets + 1):
                    
                    # === –¢–∞–±–ª–∏—Ü–∞ 2x1: QR —Å–ª–µ–≤–∞, –¥–∞–Ω–Ω—ã–µ —Å–ø—Ä–∞–≤–∞ (–ø–æ–≤—Ç–æ—Ä—è–µ—Ç—Å—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ª–∏—Å—Ç–∞) ===
                    #table_header = doc.add_table(rows=1, cols=2)
                    #table_header.autofit = False
                    # --- –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —à–∏—Ä–∏–Ω—ã —Å—Ç–æ–ª–±—Ü–æ–≤ –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã –∑–∞–≥–æ–ª–æ–≤–∫–∞ ---
                    # –®–∏—Ä–∏–Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å —É—á–µ—Ç–æ–º –ø–æ–ª–µ–π (~10.5 –¥—é–π–º–æ–≤)
                    #available_width_header = 14.0
                    # –ü—Ä–∏–º–µ—Ä–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ: QR (2 –¥—é–π–º–∞), –î–∞–Ω–Ω—ã–µ (–æ—Å—Ç–∞–≤—à–µ–µ—Å—è)
                    #table_header.columns[0].width = Cm(5.0) # –®–∏—Ä–∏–Ω–∞ QR-–∫–æ–¥–∞
                    #table_header.columns[1].width = Cm(available_width_header - 5.0) # –®–∏—Ä–∏–Ω–∞ –¥–∞–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–∞

                    #row = table_header.rows[0]
                    
                    # === –¢–∞–±–ª–∏—Ü–∞ 3x1: QR –ø–æ—Å–µ—Ä–µ–¥–∏–Ω–µ, –õ–∏—Å—Ç —Å–ø—Ä–∞–≤–∞ —Å–≤–µ—Ä—Ö—É, –¥–∞–Ω–Ω—ã–µ —Å–ø—Ä–∞–≤–∞ —Å–Ω–∏–∑—É ===
                    # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É —Å 3 —Å—Ç—Ä–æ–∫–∞–º–∏ –∏ 2 —Å—Ç–æ–ª–±—Ü–∞–º–∏
                    table_header = doc.add_table(rows=2, cols=2)
                    table_header.autofit = False
                    #table_header.style = 'Table Grid' # –£–±–µ—Ä–∏—Ç–µ, –µ—Å–ª–∏ –Ω–µ –Ω—É–∂–Ω—ã —Ä–∞–º–∫–∏
                    # --- –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —à–∏—Ä–∏–Ω—ã —Å—Ç–æ–ª–±—Ü–æ–≤ –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã –∑–∞–≥–æ–ª–æ–≤–∫–∞ ---
                    available_width_header = 19.0 # –∏–ª–∏ –≤–∞—à–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ —Å–º
                    table_header.columns[0].width = Cm(5.0) # –®–∏—Ä–∏–Ω–∞ QR-–∫–æ–¥–∞
                    table_header.columns[1].width = Cm(available_width_header - 5.0) # –®–∏—Ä–∏–Ω–∞ –¥–∞–Ω–Ω—ã—Ö/–ª–∏—Å—Ç–∞

                    # --- –°—Ç—Ä–æ–∫–∞ 1: –ü—É—Å—Ç–∞—è —è—á–µ–π–∫–∞ —Å–ª–µ–≤–∞, –ù–æ–º–µ—Ä –ª–∏—Å—Ç–∞ —Å–ø—Ä–∞–≤–∞ —Å–≤–µ—Ä—Ö—É ---
                    cell_sheet_info = table_header.rows[0].cells[1]
                    cell_sheet_info.vertical_alignment = WD_ALIGN_VERTICAL.TOP
                    p_sheet_info = cell_sheet_info.paragraphs[0]
                    run_sheet_info = p_sheet_info.add_run(f"–õ–∏—Å—Ç {sheet_number} –∏–∑ {num_sheets}")
                    # --- –£–í–ï–õ–ò–ß–ï–ù–ò–ï –®–†–ò–§–¢–ê ---
                    run_sheet_info.font.size = Pt(24) # –ë—ã–ª–æ 12, —Å—Ç–∞–ª–æ 24. –ò–ª–∏ Pt(20) –¥–ª—è 16.
                    run_sheet_info.bold = True
                    p_sheet_info.alignment = WD_ALIGN_PARAGRAPH.RIGHT # –í—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ –ø–æ –ø—Ä–∞–≤–æ–º—É –∫—Ä–∞—é

                    # --- –°—Ç—Ä–æ–∫–∞ 2: QR-–∫–æ–¥ –ø–æ—Å–µ—Ä–µ–¥–∏–Ω–µ (–æ–±—ä–µ–¥–∏–Ω—è–µ–º —è—á–µ–π–∫–∏ —Å–ª–µ–≤–∞ –∏ —Å–ø—Ä–∞–≤–∞, –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ª–µ–≤—É—é) ---
                    # –í–∞—Ä–∏–∞–Ω—Ç 1: QR –≤ –ª–µ–≤–æ–π —è—á–µ–π–∫–µ, —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π
                    cell_qr = table_header.rows[1].cells[0]
                    cell_qr.vertical_alignment = WD_ALIGN_VERTICAL.CENTER
                    cell_qr.paragraphs[0].alignment = WD_ALIGN_PARAGRAPH.CENTER # –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º QR –≤ —è—á–µ–π–∫–µ
                    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º QR-–∫–æ–¥ (–∫–æ–¥ –æ—Å—Ç–∞–µ—Ç—Å—è –ø—Ä–µ–∂–Ω–∏–º)
                    qr = qrcode.QRCode(version=1, box_size=4, border=4)
                    qr.add_data(order_id_int)
                    qr.make(fit=True)
                    img = qr.make_image(fill_color="black", back_color="white")
                    qr_path = f"temp_qr_order_{order_id_int}.png"
                    img.save(qr_path)
                    p_qr = cell_qr.paragraphs[0]
                    run_qr = p_qr.add_run()
                    # –†–∞–∑–º–µ—Ä QR-–∫–æ–¥–∞ —á—É—Ç—å –º–µ–Ω—å—à–µ –≤—ã—Å–æ—Ç—ã —Å—Ç—Ä–æ–∫–∏
                    # –í–æ–∑–º–æ–∂–Ω–æ, –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–∞–∑–º–µ—Ä
                    run_qr.add_picture(qr_path, width=Cm(4.0), height=Cm(4.0)) # –ü—Ä–∏–º–µ—Ä —Ä–∞–∑–º–µ—Ä–∞

                    # --- –°—Ç—Ä–æ–∫–∞ 3: –ü—É—Å—Ç–∞—è —è—á–µ–π–∫–∞ —Å–ª–µ–≤–∞, –î–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞ —Å–ø—Ä–∞–≤–∞ —Å–Ω–∏–∑—É ---
                    cell_text = table_header.rows[1].cells[1]
                    cell_text.vertical_alignment = WD_ALIGN_VERTICAL.TOP
                    p_text = cell_text.paragraphs[0]
                    p_text.add_run(f"–§–ò–û: {name}").bold = True
                    p_text.add_run(f"\nEmail: {email}")
                    p_text.add_run(f"\n–¢–µ–ª–µ—Ñ–æ–Ω: {phone}")
                    p_text.add_run(f"\n–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: {order_id_int}").bold = True
                    # --- –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ—á–∫–∏ –¥–æ—Å—Ç–∞–≤–∫–∏ –∏ –æ–±—â–µ–≥–æ –≤–µ—Å–∞ ---
                    p_text.add_run(f"\n–¢–æ—á–∫–∞ –¥–æ—Å—Ç–∞–≤–∫–∏: {delivery_point}")
                    p_text.add_run(f"\n–û–±—â–∏–π –≤–µ—Å –∑–∞–∫–∞–∑–∞: {total_order_weight:.0f} –≥")
                    p_text.alignment = WD_ALIGN_PARAGRAPH.LEFT
                    # –í—ã—Å–æ—Ç–∞ —Å—Ç—Ä–æ–∫ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –¥–ª—è –ª—É—á—à–µ–≥–æ –∫–æ–Ω—Ç—Ä–æ–ª—è)
                    # table_header.rows[0].height = Cm(1.0) # –í—ã—Å–æ—Ç–∞ —Å—Ç—Ä–æ–∫–∏ —Å –Ω–æ–º–µ—Ä–æ–º –ª–∏—Å—Ç–∞
                    # table_header.rows[1].height = Cm(5.0) # –í—ã—Å–æ—Ç–∞ —Å—Ç—Ä–æ–∫–∏ —Å QR
                    # table_header.rows[2].height = Cm(3.0) # –í—ã—Å–æ—Ç–∞ —Å—Ç—Ä–æ–∫–∏ —Å –¥–∞–Ω–Ω—ã–º–∏



                    # - –¢–∞–±–ª–∏—Ü–∞ —Ç–æ–≤–∞—Ä–æ–≤ (–æ–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è) -
                    doc.add_paragraph() # –û—Ç—Å—Ç—É–ø
                    total_amount = 0.0

                    # --- –ò–ó–ú–ï–ù–ï–ù–û: –î–æ–±–∞–≤–ª–µ–Ω —Å—Ç–æ–ª–±–µ—Ü "–í–µ—Å" ---
                    # –î–∞–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã
                    data = [["–¢–æ–≤–∞—Ä", "–ö–æ–ª-–≤–æ", "–¶–µ–Ω–∞", "–°—Ç–æ–∏–º–æ—Å—Ç—å", "–í–µ—Å (–≥)"]] # <-- –î–æ–±–∞–≤–ª–µ–Ω —Å—Ç–æ–ª–±–µ—Ü
                    for _, row_data in group.iterrows():
                        product = clean_text_for_pdf(row_data['ProductName']) if pd.notna(row_data['ProductName']) else "–ù–µ —É–∫–∞–∑–∞–Ω"
                        quantity = int(row_data['Quantity']) if pd.notna(row_data['Quantity']) else 0
                        price = float(row_data['Price']) if pd.notna(row_data['Price']) else 0.0
                        line_total = price * quantity
                        total_amount += line_total
                        # --- –ù–û–í–û–ï: –ü–æ–ª—É—á–µ–Ω–∏–µ –≤–µ—Å–∞ –ø–æ–∑–∏—Ü–∏–∏ ---
                        item_weight = float(row_data['TotalWeight']) if pd.notna(row_data['TotalWeight']) else 0.0
                        # --- –ö–û–ù–ï–¶: –ü–æ–ª—É—á–µ–Ω–∏–µ –≤–µ—Å–∞ –ø–æ–∑–∏—Ü–∏–∏ ---
                        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –≤ —Ç–∞–±–ª–∏—Ü—É —Å –≤–µ—Å–æ–º
                        data.append([product, str(quantity), f"{price:.2f}", f"{line_total:.2f}", f"{item_weight:.0f}"]) # <-- –î–æ–±–∞–≤–ª–µ–Ω –≤–µ—Å
                    data.append(["–ò–¢–û–ì–û –ü–û –ó–ê–ö–ê–ó–£:", "", "", f"{total_amount:.2f} —Ä—É–±.", ""]) # <-- –ü—É—Å—Ç–∞—è —è—á–µ–π–∫–∞ –¥–ª—è –≤–µ—Å–∞ –≤ –∏—Ç–æ–≥–æ–≤–æ–π —Å—Ç—Ä–æ–∫–µ
                    # --- –ö–û–ù–ï–¶: –ò–∑–º–µ–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü—ã ---

                    # --- –°–æ–∑–¥–∞–Ω–∏–µ –∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã —Ç–æ–≤–∞—Ä–æ–≤ ---
                    # –®–∏—Ä–∏–Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã (–≤ –¥—é–π–º–∞—Ö, —Å —É—á–µ—Ç–æ–º –ø–æ–ª–µ–π ~10.5 –¥—é–π–º–æ–≤)
                    available_width_items = 14.0
                    # --- –ò–ó–ú–ï–ù–ï–ù–û: –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —à–∏—Ä–∏–Ω—ã –Ω–∞ 5 —Å—Ç–æ–ª–±—Ü–æ–≤ ---
                    # –ü—Ä–µ–¥–ø–æ–ª–æ–∂–∏–º, —Ä–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∞–∫: –¢–æ–≤–∞—Ä(35%), –ö–æ–ª-–≤–æ(10%), –¶–µ–Ω–∞(15%), –°—Ç–æ–∏–º–æ—Å—Ç—å(20%), –í–µ—Å(20%)
                    column_widths = [
                        8.0,  # –¢–æ–≤–∞—Ä
                        1.0,  # –ö–æ–ª-–≤–æ
                        1.5,  # –¶–µ–Ω–∞
                        1.0,  # –°—Ç–æ–∏–º–æ—Å—Ç—å
                        1.5   # –í–µ—Å (–≥)
                    ]
                    # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã
                    table_items = doc.add_table(rows=1, cols=len(column_widths))
                    table_items.style = 'Table Grid' # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–º–∫–∏
                    table_items.autofit = True
                    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —à–∏—Ä–∏–Ω—ã —Å—Ç–æ–ª–±—Ü–æ–≤
                    for i, w in enumerate(column_widths):
                        table_items.columns[i].width = Cm(w)

                    # –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –¥–∞–Ω–Ω—ã–º–∏
                    hdr_cells = table_items.rows[0].cells
                    # –ó–∞–≥–æ–ª–æ–≤–æ–∫
                    for i, text in enumerate(data[0]):
                        hdr_cells[i].text = text
                        hdr_cells[i].paragraphs[0].runs[0].bold = True
                        hdr_cells[i].paragraphs[0].alignment = WD_ALIGN_PARAGRAPH.CENTER
                        hdr_cells[i].vertical_alignment = WD_ALIGN_VERTICAL.CENTER

                    # –°—Ç—Ä–æ–∫–∏ –¥–∞–Ω–Ω—ã—Ö
                    for row_data in data[1:]: # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
                        row_cells = table_items.add_row().cells
                        for i, cell_text in enumerate(row_data):
                            row_cells[i].text = cell_text
                            # –í—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ
                            if i == 0: # –¢–æ–≤–∞—Ä - –ø–æ –ª–µ–≤–æ–º—É –∫—Ä–∞—é
                                row_cells[i].paragraphs[0].alignment = WD_ALIGN_PARAGRAPH.LEFT
                            elif i == len(row_data) - 1: # –ü–æ—Å–ª–µ–¥–Ω–∏–π —Å—Ç–æ–ª–±–µ—Ü (–í–µ—Å –∏–ª–∏ –ò–¢–û–ì–û) - –ø–æ –ø—Ä–∞–≤–æ–º—É –∫—Ä–∞—é
                                row_cells[i].paragraphs[0].alignment = WD_ALIGN_PARAGRAPH.RIGHT
                            else: # –û—Å—Ç–∞–ª—å–Ω—ã–µ - –ø–æ —Ü–µ–Ω—Ç—Ä—É
                                row_cells[i].paragraphs[0].alignment = WD_ALIGN_PARAGRAPH.CENTER
                            row_cells[i].vertical_alignment = WD_ALIGN_VERTICAL.CENTER
                    
                    # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ "–ò–¢–û–ì–û"
                    last_row = table_items.rows[-1].cells
                    for cell in last_row:
                        for paragraph in cell.paragraphs:
                            for run in paragraph.runs:
                                run.bold = True
                    # –í—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ –∏—Ç–æ–≥–æ–≤–æ–π —Å—É–º–º—ã –ø–æ –ø—Ä–∞–≤–æ–º—É –∫—Ä–∞—é
                    last_row[3].paragraphs[0].alignment = WD_ALIGN_PARAGRAPH.RIGHT
                    last_row[3].paragraphs[0].runs[0].bold = True
                    # –í–µ—Å –≤ —Å—Ç—Ä–æ–∫–µ –∏—Ç–æ–≥–æ –ø—É—Å—Ç–æ–π, –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ
                    # --- –ö–æ–Ω–µ—Ü: –°–æ–∑–¥–∞–Ω–∏–µ –∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã —Ç–æ–≤–∞—Ä–æ–≤ ---

                    # –ù–æ–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞, –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –ø–æ—Å–ª–µ–¥–Ω–∏–π –ª–∏—Å—Ç –¥–ª—è —ç—Ç–æ–≥–æ –∑–∞–∫–∞–∑–∞
                    if sheet_number < num_sheets:
                        doc.add_page_break()
                    # –ï—Å–ª–∏ —ç—Ç–æ –ø–æ—Å–ª–µ–¥–Ω–∏–π –ª–∏—Å—Ç –¥–ª—è –∑–∞–∫–∞–∑–∞, –Ω–æ –Ω–µ –ø–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–∫–∞–∑, –Ω–æ–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–æ–±–∞–≤–∏—Ç—Å—è –≤ –∫–æ–Ω—Ü–µ –≤–Ω–µ—à–Ω–µ–≥–æ —Ü–∏–∫–ª–∞
                # --- –ö–û–ù–ï–¶: –¶–∏–∫–ª –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –ª–∏—Å—Ç–æ–≤ ---
                
                # –£–¥–∞–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ QR-–∫–æ–¥–∞ –¥–ª—è —ç—Ç–æ–≥–æ –∑–∞–∫–∞–∑–∞ (–º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –æ–¥–∏–Ω —Ä–∞–∑ –≤ –∫–æ–Ω—Ü–µ, –∏–ª–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ª–∏—Å—Ç–∞)
                # –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã, —É–¥–∞–ª–∏–º –≤ –∫–æ–Ω—Ü–µ –≤–Ω–µ—à–Ω–µ–≥–æ —Ü–∏–∫–ª–∞ –ø–æ –∑–∞–∫–∞–∑–∞–º
                try:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–∞ –ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è qr_path –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ 
                    #(–Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ group –±—ã–ª –ø—É—Å—Ç –∏–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ —Ä–∞–Ω–µ–µ)
                    if 'qr_path' in locals(): 
                        os.remove(qr_path)
                        logging.debug(f"–£–¥–∞–ª—ë–Ω –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª QR-–∫–æ–¥–∞: {qr_path}")
                    # else: # –ù–µ –∫—Ä–∏—Ç–∏—á–Ω–æ, –µ—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ –±—ã–ª —Å–æ–∑–¥–∞–Ω –¥–ª—è —ç—Ç–æ–≥–æ –∑–∞–∫–∞–∑–∞
                except FileNotFoundError:
                    # –§–∞–π–ª —É–∂–µ –±—ã–ª —É–¥–∞–ª–µ–Ω –∏–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–ª
                    logging.debug(f"–í—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª QR-–∫–æ–¥–∞ {qr_path if 'qr_path' in locals() else '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'} –Ω–µ –Ω–∞–π–¥–µ–Ω –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏.")
                except Exception as e:
                # –î—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏
                    logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª QR-–∫–æ–¥–∞ {qr_path if 'qr_path' in locals() else '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}: {e}")
 
                
            # ... (—Ü–∏–∫–ª for –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è) ...




            # === –®–ê–ì 4: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –ù–ï–û–ü–õ–ê–ß–ï–ù–ù–´–•/–û–¢–ú–ï–ù–ï–ù–ù–´–• –∑–∞–∫–∞–∑–æ–≤ ===
            # –í—ã–±–∏—Ä–∞–µ–º —Å—á–µ—Ç–∞ –∏–∑ bills —Å —Ç–µ–º –∂–µ loaded_id, –Ω–æ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º –ù–ï 'succeeded'
            query_unpaid_bills = """
                SELECT order_id_int, name, email, total_amount, status
                FROM bills
                WHERE loaded_id = ? AND status <> 'succeeded' -- –ò–ª–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Å—Ç–∞—Ç—É—Å—ã IN ('pending', 'cancelled')
            """
            df_unpaid_bills = pd.read_sql(query_unpaid_bills, self.conn, params=[loaded_id])

            if not df_unpaid_bills.empty:
                doc.add_page_break() # –ù–æ–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞

                # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
                p = doc.add_paragraph()
                p.add_run("–ù–µ–æ–ø–ª–∞—á–µ–Ω–Ω—ã–µ –∏ –æ—Ç–º–µ–Ω–µ–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã").bold = True
                p.alignment = WD_ALIGN_PARAGRAPH.CENTER

                # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
                table_uc = doc.add_table(rows=1, cols=5)
                table_uc.style = 'Table Grid'
                hdr_cells_uc = table_uc.rows[0].cells
                hdr_texts_uc = ["–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞", "–§–ò–û", "Email", "–°—É–º–º–∞", "–°—Ç–∞—Ç—É—Å"]
                for i, text in enumerate(hdr_texts_uc):
                    hdr_cells_uc[i].text = text
                    hdr_cells_uc[i].paragraphs[0].alignment = WD_ALIGN_PARAGRAPH.CENTER
                    hdr_cells_uc[i].vertical_alignment = WD_ALIGN_VERTICAL.CENTER
                    hdr_cells_uc[i].paragraphs[0].runs[0].bold = True

                # –ó–∞–ø–æ–ª–Ω—è–µ–º —Ç–∞–±–ª–∏—Ü—É –¥–∞–Ω–Ω—ã–º–∏
                for _, row in df_unpaid_bills.iterrows():
                    row_cells = table_uc.add_row().cells
                    # –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ None
                    order_id_uc = int(row['order_id_int']) if pd.notna(row['order_id_int']) else "N/A"
                    name_uc = clean_text_for_pdf(row['name']) if pd.notna(row['name']) else "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
                    email_uc = clean_text_for_pdf(row['email']) if pd.notna(row['email']) else "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
                    amount_uc = f"{float(row['total_amount']):.2f} —Ä—É–±." if pd.notna(row['total_amount']) else "N/A"
                    status_uc = row['status'] if pd.notna(row['status']) else "N/A"

                    row_cells[0].text = str(order_id_uc)
                    row_cells[1].text = name_uc
                    row_cells[2].text = email_uc
                    row_cells[3].text = amount_uc
                    row_cells[4].text = status_uc

                    # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —è—á–µ–µ–∫ (–≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ –∏ —Ç.–¥.)
                    for i in range(5):
                        row_cells[i].vertical_alignment = WD_ALIGN_VERTICAL.CENTER
                        if i < 3: # –ù–æ–º–µ—Ä, –§–ò–û, Email - –ø–æ –ª–µ–≤–æ–º—É –∫—Ä–∞—é
                            row_cells[i].paragraphs[0].alignment = WD_ALIGN_PARAGRAPH.LEFT
                        else: # –°—É–º–º–∞, –°—Ç–∞—Ç—É—Å - –ø–æ –ø—Ä–∞–≤–æ–º—É –∫—Ä–∞—é
                            row_cells[i].paragraphs[0].alignment = WD_ALIGN_PARAGRAPH.RIGHT

            # === –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ DOCX ===
            doc.save(docx_filename)
            logging.info(f"DOCX —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {docx_filename}")

            # –£–¥–∞–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö QR-—Ñ–∞–π–ª–æ–≤
            #for file in os.listdir('.'):
            #    if file.startswith("temp_qr_order_") and file.endswith(".png"):
            #        try:
            #            os.remove(file)
            #            logging.debug(f"–£–¥–∞–ª—ë–Ω –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª QR-–∫–æ–¥–∞: {file}")
            #        except Exception as e:
            #            logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª {file}: {e}")

            messagebox.showinfo("‚úÖ", f"DOCX —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω:\n{docx_filename}")

        except Exception as e:
            error_msg = f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ DOCX: {e}"
            logging.error(error_msg, exc_info=True) # exc_info=True –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ç—Ä–µ–π—Å–∞
            messagebox.showerror("‚ùå –û—à–∏–±–∫–∞", error_msg)

    # ==================== –§–£–ù–ö–¶–ò–ò –î–õ–Ø –°–ß–ï–¢–û–í ====================
    
    def create_bills_widgets(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –¥–ª—è –≤–∫–ª–∞–¥–∫–∏ —Å—á–µ—Ç–æ–≤"""
        # –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å –ø—Ä–æ–∫—Ä—É—Ç–∫–æ–π
        canvas = tk.Canvas(self.bills_frame)
        scrollbar = ttk.Scrollbar(self.bills_frame, orient="vertical", command=canvas.yview)
        scrollable_frame = ttk.Frame(canvas)
        scrollable_frame.bind(
            "<Configure>",
            lambda e: canvas.configure(scrollregion=canvas.bbox("all"))
        )
        canvas.create_window((0, 0), window=scrollable_frame, anchor="nw")
        canvas.configure(yscrollcommand=scrollbar.set)
        canvas.pack(side="left", fill="both", expand=True)
        scrollbar.pack(side="right", fill="y")

        # --- –°–µ–∫—Ü–∏—è —Å—Ç–∞—Ç—É—Å–∞ API ---
        api_frame = ttk.LabelFrame(scrollable_frame, text="–°—Ç–∞—Ç—É—Å API –ÆKassa", padding=10)
        api_frame.pack(fill=tk.X, pady=(0, 10), padx=5)
        self.api_status_label = ttk.Label(api_frame, text="–ü—Ä–æ–≤–µ—Ä–∫–∞...", foreground="orange")
        self.api_status_label.pack(side=tk.LEFT)

        # --- –°–µ–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–æ–≤ ---
        update_frame = ttk.LabelFrame(scrollable_frame, text="–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–æ–≤ —Å—á–µ—Ç–æ–≤", padding=10)
        update_frame.pack(fill=tk.X, pady=(0, 10), padx=5)
        self.btn_get_info = ttk.Button(
            update_frame,
            text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å—ã —Å—á–µ—Ç–æ–≤",
            command=self.get_bills_info,
            state=tk.DISABLED
        )
        self.btn_get_info.pack(pady=5)

        # --- –û–±–ª–∞—Å—Ç—å –¥–ª—è –≤—ã–≤–æ–¥–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ ---
        # –°–æ–∑–¥–∞–µ–º —Ñ—Ä–µ–π–º –¥–ª—è –æ–±–ª–∞—Å—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤, –ù–ï —Ä–∞—Å—Ç—è–≥–∏–≤–∞–µ–º –µ–≥–æ –ø–æ –≤–µ—Ä—Ç–∏–∫–∞–ª–∏
        self.result_frame_stats = tk.Frame(update_frame)
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º fill=tk.X, —á—Ç–æ–±—ã —Ä–∞—Å—Ç—è–≥–∏–≤–∞–ª—Å—è –ø–æ —à–∏—Ä–∏–Ω–µ, –Ω–æ expand=False (–∏–ª–∏ –µ–≥–æ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ)
        # —á—Ç–æ–±—ã –Ω–µ –∑–∞–Ω–∏–º–∞–ª –≤—Å—ë –¥–æ—Å—Ç—É–ø–Ω–æ–µ –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ
        self.result_frame_stats.pack(pady=10, padx=10, fill=tk.X) # –ò–∑–º–µ–Ω–µ–Ω–æ: —É–±—Ä–∞–Ω expand=True

        # –°–æ–∑–¥–∞–µ–º Text —Å —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –≤—ã—Å–æ—Ç–æ–π –≤ 7 —Å—Ç—Ä–æ–∫
        self.result_text_stats = tk.Text(
            self.result_frame_stats,
            wrap=tk.WORD,
            state=tk.DISABLED,
            height=7  # <-- –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—ã—Å–æ—Ç—ã –≤ 7 —Å—Ç—Ä–æ–∫
        )
        # –°–æ–∑–¥–∞–µ–º Scrollbar –¥–ª—è Text
        self.result_scrollbar_stats = tk.Scrollbar(
            self.result_frame_stats,
            orient="vertical",
            command=self.result_text_stats.yview
        )
        # –°–≤—è–∑—ã–≤–∞–µ–º Scrollbar —Å Text
        self.result_text_stats.configure(yscrollcommand=self.result_scrollbar_stats.set)
        # –£–ø–∞–∫–æ–≤—ã–≤–∞–µ–º Text –∏ Scrollbar –≤–Ω—É—Ç—Ä–∏ –∏—Ö —Ñ—Ä–µ–π–º–∞
        # Text —Ä–∞—Å—Ç—è–≥–∏–≤–∞–µ—Ç—Å—è –ø–æ —à–∏—Ä–∏–Ω–µ –∏ –∑–∞–ø–æ–ª–Ω—è–µ—Ç —Ñ—Ä–µ–π–º –ø–æ –≤–µ—Ä—Ç–∏–∫–∞–ª–∏ (–≤—ã—Å–æ—Ç–∞ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–∞ —Å–∞–º–∏–º Text)
        self.result_text_stats.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)
        # Scrollbar —Ä–∞—Å—Ç—è–≥–∏–≤–∞–µ—Ç—Å—è –ø–æ –≤–µ—Ä—Ç–∏–∫–∞–ª–∏ (–≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –≤—ã—Å–æ—Ç—ã Text)
        self.result_scrollbar_stats.pack(side=tk.RIGHT, fill=tk.Y)
        # --- –ö–æ–Ω–µ—Ü –æ–±–ª–∞—Å—Ç–∏ –¥–ª—è –≤—ã–≤–æ–¥–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ ---

        # --- –°–µ–∫—Ü–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è —Å—á–µ—Ç–æ–≤ ---
        auto_create_frame = ttk.LabelFrame(scrollable_frame, text="–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ —Å—á–µ—Ç–æ–≤", padding=10)
        auto_create_frame.pack(fill=tk.BOTH, expand=True, pady=(0, 10), padx=5)
        ttk.Label(auto_create_frame, text="–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞—Å—Ç —Å—á–µ—Ç–∞ –≤ –ÆKassa –¥–ª—è –≤—Å–µ—Ö –∑–∞–∫–∞–∑–æ–≤,\n—É –∫–æ—Ç–æ—Ä—ã—Ö –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö bill_id –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.").pack(pady=(0, 10))
        self.btn_auto_create = ttk.Button(
            auto_create_frame,
            text="–°–æ–∑–¥–∞—Ç—å —Å—á–µ—Ç–∞ –¥–ª—è –Ω–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤",
            command=self.auto_create_invoices,
            state=tk.DISABLED
        )
        self.btn_auto_create.pack(pady=5)
        # --- –ü—Ä–æ–≥—Ä–µ—Å—Å –∏ –ª–æ–≥–∏ ---
        self.progress_frame = ttk.Frame(auto_create_frame)
        # progress_bar –∏ progress_label –±—É–¥—É—Ç —Å–æ–∑–¥–∞–Ω—ã –ø–æ–∑–∂–µ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
        self.log_frame = ttk.Frame(auto_create_frame)
        self.log_text_widget = scrolledtext.ScrolledText(self.log_frame, wrap=tk.WORD, state=tk.DISABLED, height=15)
        self.log_text_widget.pack(fill=tk.BOTH, expand=True)
 
 
 
 
    def log_to_widget(self, message):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å–æ–∑–¥–∞–Ω–∏—è —Å—á–µ—Ç–æ–≤ –≤ –≤–∏–¥–∂–µ—Ç GUI"""
        self.log_text_widget.config(state=tk.NORMAL)
        self.log_text_widget.insert(tk.END, f"[{datetime.now().strftime('%H:%M:%S')}] {message}\n")
        self.log_text_widget.see(tk.END)
        self.log_text_widget.config(state=tk.DISABLED)
        self.root.update_idletasks()

    def update_invoice_statuses(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–æ–≤ —Å—á–µ—Ç–æ–≤ —á–µ—Ä–µ–∑ API –ÆKassa"""
        if not self.conn:
            messagebox.showwarning("‚ö†Ô∏è", "–ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î.")
            return False
        yookassa_config = self.config.get('YOOCASSA', {})
        shop_id = yookassa_config.get('shop_id', '')
        secret_key = yookassa_config.get('secret_key', '')
        if not shop_id or not secret_key:
            messagebox.showwarning("‚ö†Ô∏è", "API –ÆKassa –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω.")
            return False
        try:
            cursor = self.conn.cursor()
            # –í—ã–±–∏—Ä–∞–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ —Å—á–µ—Ç–∞, —É –∫–æ—Ç–æ—Ä—ã—Ö –µ—Å—Ç—å bill_id (invoice_id)
            cursor.execute("SELECT id, bill_id FROM bills WHERE bill_id IS NOT NULL AND bill_id <> ''")
            rows = cursor.fetchall()
            if not rows:
                logging.info("–ù–µ—Ç —Å—á–µ—Ç–æ–≤ —Å bill_id –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–æ–≤.")
                return True # –ù–µ—á–µ–≥–æ –æ–±–Ω–æ–≤–ª—è—Ç—å, –Ω–æ —ç—Ç–æ –Ω–µ –æ—à–∏–±–∫–∞
            updated_count = 0
            error_count = 0
            for bill_id_db, invoice_id in rows:
                try:
                    # 1. –§–æ—Ä–º–∏—Ä—É–µ–º URL –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å—á–µ—Ç–µ
                    url = f"https://api.yookassa.ru/v3/invoices/{invoice_id}"
                    # 2. –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
                    credentials = f"{shop_id}:{secret_key}"
                    encoded_credentials = base64.b64encode(credentials.encode('utf-8')).decode('utf-8')
                    headers = {
                        'Authorization': f"Basic {encoded_credentials}",
                        'Content-Type': 'application/json'
                    }
                    # 3. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º GET-–∑–∞–ø—Ä–æ—Å
                    logging.debug(f"–û—Ç–ø—Ä–∞–≤–∫–∞ GET-–∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ {url}")
                    response = requests.get(url, headers=headers)
                    # 4. –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç
                    if response.status_code == 200:
                        invoice_data = response.json()
                        new_status = invoice_data.get('status')
                        if new_status:
                            # 5. –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –ë–î
                            update_cursor = self.conn.cursor()
                            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
                            update_cursor.execute(
                                "UPDATE bills SET status = ? WHERE id = ?",
                                new_status, bill_id_db
                            )
                            if update_cursor.rowcount > 0:
                                self.conn.commit()
                                updated_count += 1
                                logging.info(f"–°—Ç–∞—Ç—É—Å —Å—á–µ—Ç–∞ {invoice_id} –æ–±–Ω–æ–≤–ª–µ–Ω –¥–æ '{new_status}' (DB ID: {bill_id_db})")
                            else:
                                logging.warning(f"–°—Ç–∞—Ç—É—Å —Å—á–µ—Ç–∞ {invoice_id} –Ω–µ –±—ã–ª –æ–±–Ω–æ–≤–ª–µ–Ω (DB ID: {bill_id_db}), –≤–æ–∑–º–æ–∂–Ω–æ, —Å—Ç–∞—Ç—É—Å –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è –∏–ª–∏ –∑–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
                            update_cursor.close()
                        else:
                           logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∏–∑ –æ—Ç–≤–µ—Ç–∞ –¥–ª—è —Å—á–µ—Ç–∞ {invoice_id} (DB ID: {bill_id_db}). –û—Ç–≤–µ—Ç: {invoice_data}")
                           error_count += 1
                    elif response.status_code == 404:
                        # –°—á–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω - –≤–æ–∑–º–æ–∂–Ω–æ, –æ–Ω –±—ã–ª —É–¥–∞–ª–µ–Ω –∏–ª–∏ ID –Ω–µ–≤–µ—Ä–µ–Ω
                        logging.warning(f"–°—á–µ—Ç {invoice_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ÆKassa (404) (DB ID: {bill_id_db}).")
                        # –ú–æ–∂–Ω–æ —Ä–µ—à–∏—Ç—å, –æ–±–Ω–æ–≤–ª—è—Ç—å –ª–∏ —Å—Ç–∞—Ç—É—Å –Ω–∞ –∫–∞–∫–æ–π-—Ç–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π, –Ω–∞–ø—Ä–∏–º–µ—Ä 'not_found'
                        # update_cursor = self.conn.cursor()
                        # update_cursor.execute("UPDATE bills SET status = ? WHERE id = ?", 'not_found', bill_id_db)
                        # self.conn.commit()
                        # update_cursor.close()
                        error_count += 1
                    else:
                        # –î—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞ API
                        try:
                            error_data = response.json()
                            error_msg_detail = json.dumps(error_data, ensure_ascii=False)
                        except:
                            error_msg_detail = response.text
                        logging.error(f"–û—à–∏–±–∫–∞ API –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ —Å—á–µ—Ç–∞ {invoice_id} (DB ID: {bill_id_db}) (HTTP {response.status_code}): {error_msg_detail}")
                        error_count += 1
                except requests.exceptions.RequestException as e:
                    # –û—à–∏–±–∫–∏ —Å–µ—Ç–∏, —Ç–∞–π–º–∞—É—Ç—ã –∏ —Ç.–¥.
                    logging.error(f"–û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ —Å—á–µ—Ç–∞ {invoice_id} (DB ID: {bill_id_db}): {e}")
                    error_count += 1
                except Exception as e:
                    # –î—Ä—É–≥–∏–µ –∏—Å–∫–ª—é—á–µ–Ω–∏—è
                    logging.error(f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ —Å—á–µ—Ç–∞ {invoice_id} (DB ID: {bill_id_db}): {e}", exc_info=True)
                    error_count += 1
            logging.info(f"–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –£—Å–ø–µ—à–Ω–æ: {updated_count}, –û—à–∏–±–æ–∫: {error_count}")
            if error_count > 0:
                 messagebox.showwarning("‚ö†Ô∏è –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–æ–≤", f"–í–æ –≤—Ä–µ–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–æ–≤ –ø—Ä–æ–∏–∑–æ—à–ª–∏ –æ—à–∏–±–∫–∏.\n–£—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ: {updated_count}\n–û—à–∏–±–æ–∫: {error_count}")
            else:
                 messagebox.showinfo("‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–æ–≤", f"–°—Ç–∞—Ç—É—Å—ã —Å—á–µ—Ç–æ–≤ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã.\n–û–±–Ω–æ–≤–ª–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: {updated_count}")
            return True
        except Exception as e:
            error_msg = f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–æ–≤ —Å—á–µ—Ç–æ–≤: {e}"
            logging.error(error_msg, exc_info=True)
            messagebox.showerror("‚ùå –û—à–∏–±–∫–∞", error_msg)
            return False

    def get_bills_info(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å—á–µ—Ç–æ–≤ (—Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º —Å—Ç–∞—Ç—É—Å–æ–≤)"""
        if not self.conn:
            messagebox.showwarning("‚ö†Ô∏è", "–ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î.")
            return
        # --- –ù–û–í–û–ï: –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å—ã –ø–µ—Ä–µ–¥ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ ---
        self.log_to_widget("üîÑ –ù–∞—á–∏–Ω–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–æ–≤ —Å—á–µ—Ç–æ–≤...")
        update_success = self.update_invoice_statuses()
        if not update_success:
            # –ï—Å–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å, –≤—Å—ë —Ä–∞–≤–Ω–æ –ø–æ–∫–∞–∂–µ–º —Å—Ç–∞—Ä—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            self.log_to_widget("‚ùå –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–æ–≤ –Ω–µ —É–¥–∞–ª–æ—Å—å, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É.")
        else:
             self.log_to_widget("‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–æ.")
        try:
            cursor = self.conn.cursor()
            # 1. –°—á–µ—Ç–∞ –±–µ–∑ bill_id
            cursor.execute("SELECT COUNT(*) FROM bills WHERE bill_id IS NULL OR bill_id = ''")
            count_no_bill_id = cursor.fetchone()[0]
            # 2. –°—á–µ—Ç–∞ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º 'pending'
            cursor.execute("SELECT COUNT(*) FROM bills WHERE status = ?", 'pending')
            count_pending = cursor.fetchone()[0]
            # 3. –°—á–µ—Ç–∞ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º 'cancelled'/'canceled'
            cursor.execute("SELECT COUNT(*) FROM bills WHERE status IN (?, ?)", ('cancelled', 'canceled'))
            count_cancelled = cursor.fetchone()[0]
            # --- –ù–û–í–û–ï: –î–æ–±–∞–≤–ª—è–µ–º —Å—á–µ—Ç–∞ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º 'paid' ---
            cursor.execute("SELECT COUNT(*) FROM bills WHERE status = ?", 'succeeded')
            count_paid = cursor.fetchone()[0]
            # --- –ù–û–í–û–ï: –î–æ–±–∞–≤–ª—è–µ–º —Å—á–µ—Ç–∞ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º 'waiting_for_capture' ---
            cursor.execute("SELECT COUNT(*) FROM bills WHERE status = ?", 'waiting_for_capture')
            count_waiting_for_capture = cursor.fetchone()[0]
            # --- –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ ---
            result_text = (
                f"–°—á–µ—Ç–æ–≤ –±–µ–∑ bill_id: {count_no_bill_id}\n"
                f"–°—á–µ—Ç–æ–≤ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º 'pending': {count_pending}\n"
                f"–°—á–µ—Ç–æ–≤ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º 'waiting_for_capture': {count_waiting_for_capture}\n" # –ù–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å
                f"–°—á–µ—Ç–æ–≤ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º 'succeeded': {count_paid}\n" # –ù–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å
                f"–°—á–µ—Ç–æ–≤ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º 'cancelled/canceled': {count_cancelled}\n"
                "---\n"
                )
            # --- –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ ---
            self.result_text_stats.config(state=tk.NORMAL)
            self.result_text_stats.delete(1.0, tk.END)
            self.result_text_stats.insert(tk.END, result_text)
            self.result_text_stats.config(state=tk.DISABLED)
            logging.info("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å—á–µ—Ç–æ–≤ (—Å —É—á–µ—Ç–æ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö —Å—Ç–∞—Ç—É—Å–æ–≤) –ø–æ–ª—É—á–µ–Ω–∞ –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∞.")
        except Exception as e:
            error_msg = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}"
            logging.error(error_msg)
            messagebox.showerror("‚ùå –û—à–∏–±–∫–∞", error_msg)
            self.result_text_stats.config(state=tk.NORMAL)
            self.result_text_stats.delete(1.0, tk.END)
            self.result_text_stats.insert(tk.END, f"–û—à–∏–±–∫–∞: {error_msg}\n")
            self.result_text_stats.config(state=tk.DISABLED)

    def auto_create_invoices(self, event_datetime=None):
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ —Å—á–µ—Ç–æ–≤ –¥–ª—è –∑–∞–∫–∞–∑–æ–≤ –±–µ–∑ bill_id"""
        if not self.conn:
            messagebox.showwarning("‚ö†Ô∏è", "–ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î.")
            return
        yookassa_config = self.config.get('YOOCASSA', {})
        shop_id = yookassa_config.get('shop_id', '')
        secret_key = yookassa_config.get('secret_key', '')
        if not shop_id or not secret_key:
            messagebox.showwarning("‚ö†Ô∏è", "API –ÆKassa –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω.")
            return
        try:
            cursor = self.conn.cursor()
            # 1. –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑—ã –±–µ–∑ bill_id
            cursor.execute("SELECT id, order_id_int, name, email, total_amount FROM bills WHERE bill_id IS NULL OR bill_id = ''")
            rows = cursor.fetchall()
            if not rows:
                messagebox.showinfo("‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "–ù–µ—Ç –∑–∞–∫–∞–∑–æ–≤ –±–µ–∑ bill_id –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å—á–µ—Ç–æ–≤.")
                return
            total_orders = len(rows)
            self.log_to_widget(f"–ù–∞–π–¥–µ–Ω–æ {total_orders} –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å—á–µ—Ç–æ–≤.")
            # --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ GUI –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ ---
            if not hasattr(self, 'progress_bar'):
                self.progress_frame.pack(fill=tk.X, pady=(10, 5))
                self.progress_var = tk.DoubleVar()
                self.progress_bar = ttk.Progressbar(self.progress_frame, variable=self.progress_var, maximum=total_orders)
                self.progress_bar.pack(fill=tk.X)
                self.progress_label = ttk.Label(self.progress_frame, text="0 / 0")
                self.progress_label.pack()
            if not hasattr(self, 'log_frame_packed'):
                 self.log_frame.pack(fill=tk.BOTH, expand=True, pady=(5, 0))
                 self.log_text_widget.pack(fill=tk.BOTH, expand=True)
                 self.log_frame_packed = True
            self.log_text_widget.config(state=tk.NORMAL)
            self.log_text_widget.delete(1.0, tk.END)
            self.log_text_widget.config(state=tk.DISABLED)
            self.btn_auto_create.config(state=tk.DISABLED, text="–°–æ–∑–¥–∞–Ω–∏–µ —Å—á–µ—Ç–æ–≤...")
            self.root.update_idletasks()
            # --- –ö–æ–Ω–µ—Ü –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ GUI ---
            success_count = 0
            error_count = 0
            for i, (bill_id_db, order_id_int, name, email, total_amount) in enumerate(rows):
                try:
                    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
                    self.progress_var.set(i + 1)
                    self.progress_label.config(text=f"{i + 1} / {total_orders}")
                    self.root.update_idletasks()
                    # 2. –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è API
                    price_value = round(float(total_amount), 2)
                    # –û–ø–∏—Å–∞–Ω–∏–µ —Å—á–µ—Ç–∞: –§–ò–û –∫–ª–∏–µ–Ω—Ç–∞ –∏ –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞
                    description = f"{name}, –∑–∞–∫–∞–∑ ‚Ññ{order_id_int}"
                    # --- –ù–û–í–û–ï: –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è - –¥–æ 23:00 MSK —Ç–µ–∫—É—â–µ–π –¥–∞—Ç—ã ---
                    # 1. –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –≤ –ú–æ—Å–∫–æ–≤—Å–∫–æ–º —á–∞—Å–æ–≤–æ–º –ø–æ—è—Å–µ (MSK)
                    msk_tz = pytz.timezone('Europe/Moscow')
                    now_msk = datetime.now(msk_tz)

                    # 2. –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç datetime –¥–ª—è —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–π –¥–∞—Ç—ã, 23:00 –ø–æ MSK
                    # replace(hour=23, minute=0, second=0, microsecond=0) —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≤—Ä–µ–º—è
                    # astimezone(msk_tz) –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç, —á—Ç–æ –æ–±—ä–µ–∫—Ç –∑–Ω–∞–µ—Ç –æ —á–∞—Å–æ–≤–æ–º –ø–æ—è—Å–µ MSK
                    expires_at_msk = now_msk.replace(hour=23, minute=0, second=0, microsecond=0).astimezone(msk_tz)

                    # 3. –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤—Ä–µ–º—è –∏—Å—Ç–µ—á–µ–Ω–∏—è –∏–∑ MSK –≤ UTC, –∫–∞–∫ —Ç—Ä–µ–±—É–µ—Ç API –ÆKassa
                    utc_tz = pytz.UTC
                    expires_at_utc = expires_at_msk.astimezone(utc_tz)

                    # 4. –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è –≤ UTC –≤ —Å—Ç—Ä–æ–∫—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ, –æ–∂–∏–¥–∞–µ–º–æ–º API
                    # –§–æ—Ä–º–∞—Ç: YYYY-MM-DDTHH:MM:SS.fffZ
                    expires_at_str = expires_at_utc.strftime('%Y-%m-%dT%H:%M:%S.%f')[:-3] + 'Z'
                    # --- –ö–û–ù–ï–¶: –ù–æ–≤—ã–π —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è ---
                    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è /v3/invoices
                    invoice_data = {
                        "cart": [
                            {
                                "description": "–í–Ω–µ—Å–µ–Ω–∏–µ –¥–µ–ø–æ–∑–∏—Ç–∞", # –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
                                "price": {
                                    "value": f"{price_value:.2f}",
                                    "currency": "RUB"
                                },
                                "quantity": 1.0 # –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
                            }
                        ],
                        "description": description,
                        "expires_at": expires_at_str,
                        "payment_data": {
                            "amount": {
                                "value": f"{price_value:.2f}",
                                "currency": "RUB"
                            },
                            "capture": True # –ê–≤—Ç–æ–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
                        },
                        "delivery_method": {
                            "type": "self" # –°–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞ (—Å—Å—ã–ª–∫–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É)
                        },
                        "metadata": {
                            "order_id": str(order_id_int),
                            "internal_bill_id": str(bill_id_db) # –ù–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è —Å–æ–ø–æ—Å—Ç–∞–≤–∏—Ç—å
                        }
                    }
                    # –î–æ–±–∞–≤–ª—è–µ–º receipt, –µ—Å–ª–∏ –µ—Å—Ç—å email –∏ –§–ò–û
                    if email and '@' in email and name:
                        receipt_items = [{
                            "description": "–í–Ω–µ—Å–µ–Ω–∏–µ –¥–µ–ø–æ–∑–∏—Ç–∞", # –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
                            "quantity": 1.0, # –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
                            "amount": {
                                "value": f"{price_value:.2f}",
                                "currency": "RUB"
                            },
                            "vat_code": yookassa_config['vat_code'], # –ù–∞–ª–æ–≥–æ–≤–∞—è —Å—Ç–∞–≤–∫–∞ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
                            "payment_subject": "payment", # –ü—Ä–µ–¥–º–µ—Ç —Ä–∞—Å—á–µ—Ç–∞
                            "payment_mode": "advance" # –°–ø–æ—Å–æ–± —Ä–∞—Å—á–µ—Ç–∞
                        }]
                        invoice_data["payment_data"]["receipt"] = {
                            "items": receipt_items,
                            "tax_system_code": yookassa_config['tax_system_code'], # –°–∏—Å—Ç–µ–º–∞ –Ω–∞–ª–æ–≥–æ–æ–±–ª–æ–∂–µ–Ω–∏—è –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
                            "customer": {
                                "full_name": name, # –§–ò–û –∫–ª–∏–µ–Ω—Ç–∞
                                "email": email # Email –∫–ª–∏–µ–Ω—Ç–∞
                            }
                        }
                    # 3. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
                    url = "https://api.yookassa.ru/v3/invoices"
                    credentials = f"{shop_id}:{secret_key}"
                    encoded_credentials = base64.b64encode(credentials.encode('utf-8')).decode('utf-8')
                    headers = {
                        'Authorization': f"Basic {encoded_credentials}",
                        'Content-Type': 'application/json',
                        'Idempotence-Key': str(uuid.uuid4())
                    }
                    # --- –ò–°–ü–†–ê–í–õ–ï–ù–û: –õ–û–ì–ò–†–û–í–ê–ù–ò–ï –ó–ê–ü–†–û–°–ê ---
                    logging.info(f"–ó–∞–ø—Ä–æ—Å –∫ API: {{'method': 'POST', 'url': '{url}', 'headers': {{...}}, 'data': {json.dumps(invoice_data, ensure_ascii=False)}}}")
                    self.log_to_widget(f"üåê –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ —Å—á—ë—Ç–∞ –¥–ª—è –∑–∞–∫–∞–∑–∞ {order_id_int}...")
                    # --- –ö–û–ù–ï–¶: –õ–û–ì–ò–†–û–í–ê–ù–ò–ï –ó–ê–ü–†–û–°–ê ---
                    response = requests.post(url, headers=headers, json=invoice_data)
                    # --- –ò–°–ü–†–ê–í–õ–ï–ù–û: –õ–û–ì–ò–†–û–í–ê–ù–ò–ï –û–¢–í–ï–¢–ê ---
                    try:
                        response_content = response.json()
                    except:
                        response_content = response.text
                    response_log_data = {
                        "status_code": response.status_code,
                        "headers": dict(response.headers),
                        "content": response_content
                    }
                    logging.info(f"–û—Ç–≤–µ—Ç –æ—Ç API: {json.dumps(response_log_data, ensure_ascii=False, indent=2)}")
                    # --- –ö–û–ù–ï–¶: –õ–û–ì–ò–†–û–í–ê–ù–ò–ï –û–¢–í–ï–¢–ê ---
                    # 4. –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç
                    if response.status_code in [200, 201]:
                        result = response.json()
                        yookassa_invoice_id = result.get('id')
                                                
                        # --- –ù–û–í–û–ï: –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ expires_at ---
                        

                        expires_at_formatted_for_db = None # –î–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                        expires_at_formatted_for_email = "–Ω–µ —É–∫–∞–∑–∞–Ω" # –î–ª—è –≤—Å—Ç–∞–≤–∫–∏ –≤ –ø–∏—Å—å–º–æ

                        yookassa_expires_at_raw = result.get('expires_at')
                        if yookassa_expires_at_raw:
                            try:
                                # 1. –ü–∞—Ä—Å–∏–º —Å—Ç—Ä–æ–∫—É –≤—Ä–µ–º–µ–Ω–∏ –∏–∑ API (–æ–Ω–∞ –≤ UTC)
                                # –§–æ—Ä–º–∞—Ç: 2025-08-14T23:19:28.320Z
                                expires_at_utc = datetime.fromisoformat(yookassa_expires_at_raw.replace('Z', '+00:00'))
                                
                                # 2. –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∏–∑ UTC –≤ –ú–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è (MSK)
                                utc_tz = pytz.utc
                                msk_tz = pytz.timezone('Europe/Moscow')
                                # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –æ–±—ä–µ–∫—Ç datetime "–∑–Ω–∞–µ—Ç" –æ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –∑–æ–Ω–µ UTC
                                expires_at_utc_aware = utc_tz.localize(expires_at_utc) if expires_at_utc.tzinfo is None else expires_at_utc
                                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ MSK
                                expires_at_msk = expires_at_utc_aware.astimezone(msk_tz)
                                
                                # 3. –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –ø–∏—Å—å–º–µ (HH:MM dd.MM.yyyy)
                                expires_at_formatted_for_email = expires_at_msk.strftime('%H:%M %d.%m.%Y')
                                
                                # 4. (–û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î (–µ—Å–ª–∏ –¥–æ–±–∞–≤–∏—Ç–µ —Å—Ç–æ–ª–±–µ—Ü)
                                # expires_at_formatted_for_db = expires_at_msk # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ datetime –æ–±—ä–µ–∫—Ç
                                
                            except Exception as e_parse_expires:
                                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ/–ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–∏ expires_at '{yookassa_expires_at_raw}': {e_parse_expires}")
                                # expires_at_formatted_for_email –æ—Å—Ç–∞–Ω–µ—Ç—Å—è "–Ω–µ —É–∫–∞–∑–∞–Ω"
                        # --- –ö–û–ù–ï–¶: –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ expires_at ---
                        
                        # --- –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò–ó–í–õ–ï–ß–ï–ù–ò–ï –ò –û–ë–†–ï–ó–ö–ê URL ---
                        payment_url_raw = None
                        payment_url_final = None
                        delivery_method = result.get('delivery_method', {})
                        if isinstance(delivery_method, dict):
                            payment_url_raw = delivery_method.get('url')
                        if payment_url_raw:
                            # –£–±–∏—Ä–∞–µ–º '/a' –≤ –∫–æ–Ω—Ü–µ, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
                            if payment_url_raw.endswith('/a'):
                                payment_url_final = payment_url_raw[:-2]
                            elif payment_url_raw.endswith('/a  '): # –ò–Ω–æ–≥–¥–∞ –≤ API –ø–æ–ø–∞–¥–∞—é—Ç –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
                                payment_url_final = payment_url_raw[:-4]
                            else:
                                payment_url_final = payment_url_raw.rstrip() # –ü—Ä–æ—Å—Ç–æ —É–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª—ã —Å–ø—Ä–∞–≤–∞ –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
                        if not payment_url_final:
                            logging.warning(f"URL –¥–ª—è –æ–ø–ª–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ–±—Ä–∞–±–æ—Ç–∞–Ω –¥–ª—è —Å—á–µ—Ç–∞ {yookassa_invoice_id} (–∑–∞–∫–∞–∑ {order_id_int}). Raw URL: '{payment_url_raw}'")
                            self.log_to_widget(f"‚ö†Ô∏è URL –æ–ø–ª–∞—Ç—ã –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –¥–ª—è —Å—á–µ—Ç–∞ {yookassa_invoice_id}.")
                        else:
                            self.log_to_widget(f"‚úÖ URL –æ–ø–ª–∞—Ç—ã: {payment_url_final}")
                        # --- –ö–û–ù–ï–¶: –ò–ó–í–õ–ï–ß–ï–ù–ò–ï –ò –û–ë–†–ï–ó–ö–ê URL ---
                        if yookassa_invoice_id:
                            # 5. –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ –ë–î (–≤–∫–ª—é—á–∞—è URL)
                            update_cursor = self.conn.cursor()
                            # --- –ò–°–ü–†–ê–í–õ–ï–ù–û: –û–±–Ω–æ–≤–ª—è–µ–º –∏ bill_id, –∏ urls ---
                            update_cursor.execute(
                                "UPDATE bills SET bill_id = ?, urls = ?, expires_at = ? WHERE id = ?",
                                yookassa_invoice_id, payment_url_final, expires_at_msk, bill_id_db # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤–∏—á–Ω—ã–π –∫–ª—é—á `id` —Ç–∞–±–ª–∏—Ü—ã bills
                            )
                            # --- –ö–û–ù–ï–¶: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ bill_id –∏ urls ---
                            self.conn.commit()
                            update_cursor.close()
                            self.log_to_widget(f"‚úÖ –°—á–µ—Ç —Å–æ–∑–¥–∞–Ω –¥–ª—è –∑–∞–∫–∞–∑–∞ {order_id_int} (ID: {yookassa_invoice_id})")
                            # --- –ù–û–í–û–ï: –û—Ç–ø—Ä–∞–≤–∫–∞ email ---
                            # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π URL –∏–∑ –ë–î
                            fetch_url_cursor = self.conn.cursor()
                            fetch_url_cursor.execute("SELECT urls FROM bills WHERE id = ?", bill_id_db)
                            row_url = fetch_url_cursor.fetchone()
                            payment_url_for_email = row_url[0] if row_url else None
                            fetch_url_cursor.close()
                            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º email
                            email_sent = self.send_payment_email(
                                order_id_int=int(order_id_int),
                                client_name=name,
                                client_email=email,
                                payment_url_db=payment_url_for_email,
                                expires_at_str=expires_at_formatted_for_email
                            )
                            if email_sent:
                                self.log_to_widget(f"üìß –ü–∏—Å—å–º–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∫–ª–∏–µ–Ω—Ç—É {name} ({email})")
                            else:
                                self.log_to_widget(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ email –∫–ª–∏–µ–Ω—Ç—É {name} ({email})")
                            # --- –ö–û–ù–ï–¶: –û—Ç–ø—Ä–∞–≤–∫–∞ email ---
                            success_count += 1
                        else:
                            self.log_to_widget(f"‚ùå –û—à–∏–±–∫–∞: –ù–µ –ø–æ–ª—É—á–µ–Ω ID —Å—á–µ—Ç–∞ –æ—Ç –ÆKassa –¥–ª—è –∑–∞–∫–∞–∑–∞ {order_id_int}. –û—Ç–≤–µ—Ç: {result}")
                            error_count += 1
                    else:
                        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—à–∏–±–∫—É API
                        try:
                            error_data = response.json()
                            error_msg_detail = json.dumps(error_data, ensure_ascii=False)
                        except:
                            error_msg_detail = response.text
                        self.log_to_widget(f"‚ùå –û—à–∏–±–∫–∞ API –¥–ª—è –∑–∞–∫–∞–∑–∞ {order_id_int} (HTTP {response.status_code}): {error_msg_detail[:200]}...")
                        logging.error(f"–û—à–∏–±–∫–∞ API –¥–ª—è –∑–∞–∫–∞–∑–∞ {order_id_int} (HTTP {response.status_code}): {error_msg_detail}")
                        error_count += 1
                except Exception as e:
                    self.log_to_widget(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–∫–∞–∑–∞ {order_id_int}: {e}")
                    logging.error(f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–∫–∞–∑–∞ {order_id_int}: {e}", exc_info=True)
                    error_count += 1
                    # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–ª–µ–¥—É—é—â–∏—Ö –∑–∞–∫–∞–∑–æ–≤
            # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
            self.progress_var.set(total_orders)
            self.progress_label.config(text=f"{total_orders} / {total_orders}")
            # –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            final_message = f"–°–æ–∑–¥–∞–Ω–∏–µ —Å—á–µ—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–æ.\n–£—Å–ø–µ—à–Ω–æ: {success_count}\n–û—à–∏–±–æ–∫: {error_count}"
            self.log_to_widget(final_message)
            messagebox.showinfo("üèÅ –ó–∞–≤–µ—Ä—à–µ–Ω–æ", final_message)
        except Exception as e:
            error_msg = f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è —Å—á–µ—Ç–æ–≤: {e}"
            logging.error(error_msg, exc_info=True)
            self.log_to_widget(f"‚ùå {error_msg}")
            messagebox.showerror("‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞", error_msg)
        finally:
            self.btn_auto_create.config(state=tk.NORMAL, text="–°–æ–∑–¥–∞—Ç—å —Å—á–µ—Ç–∞ –¥–ª—è –Ω–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤")

    def send_payment_email(self, order_id_int, client_name, client_email, payment_url_db, expires_at_str):
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç email —Å —Å—Å—ã–ª–∫–æ–π –Ω–∞ –æ–ø–ª–∞—Ç—É –∏ QR-–∫–æ–¥–æ–º —á–µ—Ä–µ–∑ Exchange 2019.
        :param order_id_int: –ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞ (int)
        :param client_name: –§–ò–û –∫–ª–∏–µ–Ω—Ç–∞ (str)
        :param client_email: Email –∫–ª–∏–µ–Ω—Ç–∞ (str)
        :param payment_url_db: URL –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (str –∏–ª–∏ None)
        :param expires_at_str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –¥–∞—Ç–∞ –∏—Å—Ç–µ—á–µ–Ω–∏—è (str)
        :return: True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ, False –µ—Å–ª–∏ –æ—à–∏–±–∫–∞
        """
        if not self.conn:
            logging.error("–ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ email.")
            return False
        try:
            # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ —Ñ–æ—Ä–º–∏—Ä—É–µ–º URL-—ã
            if not payment_url_db:
                logging.error(f"URL –æ–ø–ª–∞—Ç—ã –¥–ª—è –∑–∞–∫–∞–∑–∞ {order_id_int} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –ë–î.")
                return False
            # URL –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –ø–æ —Å—Å—ã–ª–∫–µ (–¥–æ–±–∞–≤–ª—è–µ–º /l)
            payment_url_link = payment_url_db.rstrip('/') + "/l"
            # URL –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ QR-–∫–æ–¥–∞ (–¥–æ–±–∞–≤–ª—è–µ–º /q)
            payment_url_qr = payment_url_db.rstrip('/') + "/q"
            # 2. –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø–æ—á—Ç—ã
            mail_config = self.config.get('MAIL', {})
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
            required_fields = ['smtp_server']
            missing_fields = [field for field in required_fields if not mail_config.get(field)]
            if missing_fields:
                logging.error(f"–í –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø–æ—á—Ç—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è: {missing_fields}")
                return False
            # 3. –§–æ—Ä–º–∏—Ä—É–µ–º HTML-—Ç–µ–ª–æ –ø–∏—Å—å–º–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —à–∞–±–ª–æ–Ω–∞
            # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ total_amount –ø–µ—Ä–µ–¥–∞—ë—Ç—Å—è –≤ —Ñ—É–Ω–∫—Ü–∏—é –∏–ª–∏ –ø–æ–ª—É—á–∞–µ—Ç—Å—è –∏–∑ –ë–î
            # –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—É–º–º—ã, —Å–¥–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å –∫ –ë–î
            try:
                amount_cursor = self.conn.cursor()
                amount_cursor.execute("SELECT total_amount FROM bills WHERE order_id_int = ? AND email = ?", order_id_int, client_email)
                amount_row = amount_cursor.fetchone()
                order_amount = float(amount_row[0]) if amount_row and amount_row[0] is not None else 0.0
                amount_cursor.close()
            except Exception as e:
                logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—É–º–º—É –∑–∞–∫–∞–∑–∞ {order_id_int} –¥–ª—è email {client_email}: {e}. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è 0.0.")
                order_amount = 0.0
            # --- –û–ë–ù–û–í–õ–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º CID –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π ---
            html_body = f"""
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <meta name="viewport" content="width=device-width"/>
  <title>–°—á–µ—Ç –Ω–∞ –æ–ø–ª–∞—Ç—É</title>
</head>
<body style="width: 100% !important; min-width: 100%; -webkit-text-size-adjust: 100%; -ms-text-size-adjust: 100%; color: #39354e; font-family: Arial, sans-serif; font-weight: normal; text-align: left; line-height: 1.3; font-size: 16px; margin: 0; padding: 0;" align="left">
<table class="body" style="border-spacing: 0; border-collapse: collapse; vertical-align: top; text-align: left; height: 100%; width: 100%; color: #39354e; font-family: Arial, sans-serif; font-weight: normal; line-height: 1.3; font-size: 16px; background: #f0f0f0; padding: 0;" width="100%" bgcolor="#f0f0f0">
  <tr style="vertical-align: top; text-align: left; padding: 0;" align="left">
    <td class="center" style="word-break: break-word; -webkit-hyphens: none; -moz-hyphens: none; hyphens: none; border-collapse: collapse !important; color: #39354e; font-family: Arial, sans-serif; font-weight: normal; line-height: 1.3; font-size: 16px; text-align: center; margin: 0; padding: 0;" align="center" valign="top">
      <center style="width: 100%; min-width: 580px;">
      <table class="container" style="border-spacing: 0; border-collapse: collapse; vertical-align: top; text-align: inherit; width: 580px; background: #fefefe; margin: 0 auto; padding: 0;">
        <tr style="vertical-align: top; text-align: left; padding: 0;" align="left">
          <td style="word-break: break-word; -webkit-hyphens: none; -moz-hyphens: none; hyphens: none; border-collapse: collapse !important; color: #39354e; font-family: Arial, sans-serif; font-weight: normal; line-height: 1.3; font-size: 16px; text-align: left; margin: 0; padding: 0;" align="left" valign="top">
            <!-- === –ù–ê–ß–ê–õ–û: –®–ê–ü–ö–ê –° –õ–û–ì–û–¢–ò–ü–û–ú === -->
                <table class="row" style="border-spacing: 0; border-collapse: collapse; vertical-align: top; text-align: left; width: 100%; display: block; padding: 0;">
                  <tr style="vertical-align: top; text-align: left; padding: 0;" align="left">
                    <td class="wrapper last" style="word-break: break-word; -webkit-hyphens: none; -moz-hyphens: none; hyphens: none; border-collapse: collapse !important; position: relative; color: #39354e; font-family: Arial, sans-serif; font-weight: normal; line-height: 1.3; font-size: 16px; text-align: left; margin: 0; padding: 10px 0 0;" align="left" valign="top">
                      <table class="twelve columns" style="border-spacing: 0; border-collapse: collapse; vertical-align: top; text-align: left; width: 580px; margin: 0 auto; padding: 0;">
                        <tr style="vertical-align: top; text-align: left; padding: 0;" align="left">
                          <td style="word-break: break-word; -webkit-hyphens: none; -moz-hyphens: none; hyphens: none; border-collapse: collapse !important; color: #39354e; font-family: Arial, sans-serif; font-weight: normal; line-height: 1.3; font-size: 16px; text-align: left; margin: 0; padding: 0 20px 10px;" align="left" valign="top">
                            <!-- –õ–æ–≥–æ—Ç–∏–ø –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ -->
                            <table style="border-spacing: 0; border-collapse: collapse; vertical-align: top; text-align: left; width: 100%; padding: 50px 0 20px;">
                              <tr style="vertical-align: top; text-align: left; padding: 0;" align="left">
                                <td style="word-break: break-word; -webkit-hyphens: none; -moz-hyphens: none; hyphens: none; border-collapse: collapse !important; color: #39354e; font-family: Arial, sans-serif; font-weight: normal; line-height: 1.3; font-size: 16px; text-align: left; margin: 0; padding: 0 0 10px;" align="center" valign="top">
                                  <!-- –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å —à–∏—Ä–∏–Ω–æ–π 540px (580px –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä - 20px*2 padding) –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –≤—ã—Å–æ—Ç–æ–π -->
                                  <img src="cid:logo1"
                                       style="display: block; margin: 0 auto; width: 540px; height: auto; max-width: 100%;"
                                       width="540" /><br>
                                </td>
                              </tr>
                            </table>
                          </td>
                        </tr>
                      </table>
                    </td>
                  </tr>
                </table>
                <!-- === –ö–û–ù–ï–¶: –®–ê–ü–ö–ê –° –õ–û–ì–û–¢–ò–ü–û–ú === -->
            <table class="row" style="border-spacing: 0; border-collapse: collapse; vertical-align: top; text-align: left; width: 100%; display: block; padding: 0;">
              <tr style="vertical-align: top; text-align: left; padding: 0;" align="left">
                <td class="wrapper last" style="word-break: break-word; -webkit-hyphens: none; -moz-hyphens: none; hyphens: none; border-collapse: collapse !important; position: relative; color: #39354e; font-family: Arial, sans-serif; font-weight: normal; line-height: 1.3; font-size: 16px; text-align: left; margin: 0; padding: 0;" align="left" valign="top">
                  <table class="twelve columns" style="border-spacing: 0; border-collapse: collapse; vertical-align: top; text-align: left; width: 580px; margin: 0 auto; padding: 0;">
                    <tr style="vertical-align: top; text-align: left; padding: 0;" align="left">
                      <td style="word-break: break-word; -webkit-hyphens: none; -moz-hyphens: none; hyphens: none; border-collapse: collapse !important; color: #39354e; font-family: Arial, sans-serif; font-weight: normal; line-height: 1.3; font-size: 16px; text-align: left; margin: 0; padding: 0 20px 10px;" align="left" valign="top">
                        <p style="color: #39354e; font-family: Arial, sans-serif; font-weight: normal; font-size: 16px; text-align: left; line-height: 1.3; margin: 0 0 0; padding: 30px 0 0;" align="left"><span style="font-size: 24px;"><strong>–î–æ–±—Ä—ã–π –¥–µ–Ω—å, </strong></span></p>
                        <p style="color: #39354e; font-family: Arial, sans-serif; font-weight: normal; font-size: 16px; text-align: left; line-height: 1.3; margin: 0 0 10px; padding: 0;" align="left"><span style="font-size: 24px;"><strong>{client_name}</strong></span></p>
                      </td>
                    </tr>
                  </table>
                </td>
              </tr>
            </table>
            <table class="row" style="border-spacing: 0; border-collapse: collapse; vertical-align: top; text-align: left; width: 100%; display: block; padding: 0;">
              <tr style="vertical-align: top; text-align: left; padding: 0;" align="left">
                <td class="wrapper last" style="word-break: break-word; -webkit-hyphens: none; -moz-hyphens: none; hyphens: none; border-collapse: collapse !important; position: relative; color: #39354e; font-family: Arial, sans-serif; font-weight: normal; line-height: 1.3; font-size: 16px; text-align: left; margin: 0; padding: 0;" align="left" valign="top">
                  <table class="twelve columns" style="border-spacing: 0; border-collapse: collapse; vertical-align: top; text-align: left; width: 580px; margin: 0 auto; padding: 0;">
                    <tr style="vertical-align: top; text-align: left; padding: 0;" align="left">
                      <td style="word-break: break-word; -webkit-hyphens: none; -moz-hyphens: none; hyphens: none; border-collapse: collapse !important; color: #39354e; font-family: Arial, sans-serif; font-weight: normal; line-height: 1.3; font-size: 16px; text-align: left; margin: 0; padding: 0 20px 10px;" align="left" valign="top">
                        <p style="text-align: left; color: #39354e; font-family: Arial, sans-serif; font-weight: normal; font-size: 16px; line-height: 1.3; margin: 0 0 10px; padding: 20px 0 0;" align="left">–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –æ—Ñ–æ—Ä–º–∏–ª–∏ –∑–∞–∫–∞–∑ –Ω–∞ –Ω–∞—à–µ–º —Å–∞–π—Ç–µ!</p>
                      </td>
                    </tr>
                  </table>
                </td>
              </tr>
            </table>
            <!-- === –ù–û–í–û–ï: –ù–û–ú–ï–† –ó–ê–ö–ê–ó–ê –ò –°–£–ú–ú–ê –í –í–ò–î–ï –¢–ê–ë–õ–ò–¶–´ 2x2 === -->
            <table class="row" style="border-spacing: 0; border-collapse: collapse; vertical-align: top; text-align: left; width: 100%; display: block; padding: 0; margin-top: 10px;">
              <tr style="vertical-align: top; text-align: left; padding: 0;" align="left">
                <td class="wrapper" style="word-break: break-word; -webkit-hyphens: none; -moz-hyphens: none; hyphens: none; border-collapse: collapse !important; position: relative; color: #39354e; font-family: Arial, sans-serif; font-weight: normal; line-height: 1.3; font-size: 16px; text-align: left; margin: 0; padding: 0;" align="left" valign="top">
                  <table class="twelve columns" style="border-spacing: 0; border-collapse: collapse; vertical-align: top; text-align: left; width: 580px; margin: 0 auto; padding: 0;">
                    <tr style="vertical-align: top; text-align: left; padding: 0;" align="left">
                      <td style="word-break: break-word; -webkit-hyphens: none; -moz-hyphens: none; hyphens: none; border-collapse: collapse !important; color: #39354e; font-family: Arial, sans-serif; font-weight: normal; line-height: 1.3; font-size: 16px; text-align: left; margin: 0; padding: 0 20px 10px;" align="left" valign="top">
                        <!-- –¢–∞–±–ª–∏—Ü–∞ 2x2 –¥–ª—è –Ω–æ–º–µ—Ä–∞ –∑–∞–∫–∞–∑–∞ –∏ —Å—É–º–º—ã -->
                        <table style="border-spacing: 0; border-collapse: collapse; vertical-align: top; text-align: left; width: 45%; margin: 0; padding: 0;">
                          <tr style="vertical-align: top; text-align: left; padding: 0;" align="left">
                            <td style="word-break: break-word; -webkit-hyphens: none; -moz-hyphens: none; hyphens: none; border-collapse: collapse !important; color: #39354e; font-family: Arial, sans-serif; font-weight: normal; line-height: 1.3; font-size: 16px; text-align: left; margin: 0; padding: 0;" align="left" valign="top">
                              <strong>–ó–∞–∫–∞–∑ ‚Ññ</strong>
                            </td>
                            <td style="word-break: break-word; -webkit-hyphens: none; -moz-hyphens: none; hyphens: none; border-collapse: collapse !important; color: #39354e; font-family: Arial, sans-serif; font-weight: normal; line-height: 1.3; font-size: 16px; text-align: left; margin: 0; padding: 0;" align="left" valign="top">
                              {int(order_id_int)}
                            </td>
                          </tr>
                          <tr style="vertical-align: top; text-align: left; padding: 0;" align="left">
                            <td style="word-break: break-word; -webkit-hyphens: none; -moz-hyphens: none; hyphens: none; border-collapse: collapse !important; color: #39354e; font-family: Arial, sans-serif; font-weight: normal; line-height: 1.3; font-size: 16px; text-align: left; margin: 0; padding: 0;" align="left" valign="top">
                              <strong>–°—É–º–º–∞</strong>
                            </td>
                            <td style="word-break: break-word; -webkit-hyphens: none; -moz-hyphens: none; hyphens: none; border-collapse: collapse !important; color: #39354e; font-family: Arial, sans-serif; font-weight: normal; line-height: 1.3; font-size: 16px; text-align: left; margin: 0; padding: 0;" align="left" valign="top">
                              {order_amount:.2f} —Ä—É–±.
                            </td>
                          </tr>
                        </table>
                      </td>
                    </tr>
                  </table>
                </td>
              </tr>
            </table>
            <!-- === –ö–û–ù–ï–¶: –ù–û–ú–ï–† –ó–ê–ö–ê–ó–ê –ò –°–£–ú–ú–ê –í –í–ò–î–ï –¢–ê–ë–õ–ò–¶–´ 2x2 === -->
            <table class="row" style="border-spacing: 0; border-collapse: collapse; vertical-align: top; text-align: left; width: 100%; display: block; padding: 0; margin-top: 10px;">
              <tr style="vertical-align: top; text-align: left; padding: 0;" align="left">
                <td class="wrapper last" style="word-break: break-word; -webkit-hyphens: none; -moz-hyphens: none; hyphens: none; border-collapse: collapse !important; position: relative; color: #39354e; font-family: Arial, sans-serif; font-weight: normal; line-height: 1.3; font-size: 16px; text-align: left; margin: 0; padding: 0;" align="left" valign="top">
                  <table class="twelve columns" style="border-spacing: 0; border-collapse: collapse; vertical-align: top; text-align: left; width: 580px; margin: 0 auto; padding: 0;">
                    <tr style="vertical-align: top; text-align: left; padding: 0;" align="left">
                      <td style="word-break: break-word; -webkit-hyphens: none; -moz-hyphens: none; hyphens: none; border-collapse: collapse !important; color: #39354e; font-family: Arial, sans-serif; font-weight: normal; line-height: 1.3; font-size: 16px; text-align: left; margin: 0; padding: 0 20px 10px;" align="left" valign="top">
                        <p style="text-align: left; color: #39354e; font-family: Arial, sans-serif; font-weight: normal; font-size: 16px; line-height: 1.3; margin: 0 0 10px; padding: 0;" align="left">
                          –ß—Ç–æ–±—ã –∑–∞–≤–µ—Ä—à–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–∫–∞–∑–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–∏–∑–≤–µ–¥–∏—Ç–µ –æ–ø–ª–∞—Ç—É –ø–æ —Å—Å—ã–ª–∫–µ –Ω–∏–∂–µ –¥–æ 
                          <span style="font-weight: bold;">{expires_at_str}</span> –≥.
                          <br>
                          –ü–æ—Å–ª–µ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Å—Ä–æ–∫–∞ —Å—Å—ã–ª–∫–∞ –±—É–¥–µ—Ç –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞.
                        </p> 
                      </td>
                    </tr>
                  </table>
                </td>
              </tr>
            </table>
            <table class="row" style="border-spacing: 0; border-collapse: collapse; vertical-align: top; text-align: left; width: 100%; display: block; padding: 0;">
              <tr style="vertical-align: top; text-align: left; padding: 0;" align="left">
                <td class="wrapper last" style="word-break: break-word; -webkit-hyphens: none; -moz-hyphens: none; hyphens: none; border-collapse: collapse !important; position: relative; color: #39354e; font-family: Arial, sans-serif; font-weight: normal; line-height: 1.3; font-size: 16px; text-align: left; margin: 0; padding: 0;" align="left" valign="top">
                  <table class="twelve columns" style="border-spacing: 0; border-collapse: collapse; vertical-align: top; text-align: left; width: 580px; margin: 0 auto; padding: 0;">
                    <tr style="vertical-align: top; text-align: left; padding: 0;" align="left">
                      <td class="center" style="word-break: break-word; -webkit-hyphens: none; -moz-hyphens: none; hyphens: none; border-collapse: collapse !important; color: #39354e; font-family: Arial, sans-serif; font-weight: normal; line-height: 1.3; font-size: 16px; text-align: center; margin: 0; padding: 0 20px 10px;" align="center" valign="top">
                        <!--[if mso]>
                        <p style='line-height:0;margin:0;'>&nbsp;</p>
                        <v:roundrect arcsize='25%' fill='t' fillcolor='#f5b333' href='{payment_url_link}' stroke='f' strokecolor='' strokeweight='1px' style='v-text-anchor:middle;width:500px;height:45px;mso-padding-alt:0;padding:13px 20px;' xmlns:v='urn:schemas-microsoft-com:vml' xmlns:w='urn:schemas-microsoft-com:office:word'>
                          <w:anchorlock />
                          <center style='color: #FFF; font-family:sans-serif; font-size:16px; font-weight:bold; mso-line-height-rule:exactly; mso-text-raise:4px'>–û–ø–ª–∞—Ç–∏—Ç—å –∑–∞–∫–∞–∑</center>
                        </v:roundrect>
                        <![endif]-->
                        <!--[if !mso]><!-- -->
                        <a href="{payment_url_link}" style="line-height: 16px; font-size: 16px !important; display: block; width: auto; border-radius: 25px; -webkit-border-radius: 25px; -moz-border-radius: 25px; color: #ffffff; text-decoration: none; font-weight: bold; font-family: Arial, sans-serif; text-align: center; height: 100%; background: #f5b333 repeat center center; padding: 13px 20px;">–û–ø–ª–∞—Ç–∏—Ç—å –∑–∞–∫–∞–∑</a>
                        <!--<![endif]-->
                      </td>
                    </tr>
                  </table>
                </td>
              </tr>
            </table>
            <table class="row" style="border-spacing: 0; border-collapse: collapse; vertical-align: top; text-align: left; width: 100%; display: block; padding: 0;">
              <tr style="vertical-align: top; text-align: left; padding: 0;" align="left">
                <td class="wrapper last" style="word-break: break-word; -webkit-hyphens: none; -moz-hyphens: none; hyphens: none; border-collapse: collapse !important; position: relative; color: #39354e; font-family: Arial, sans-serif; font-weight: normal; line-height: 1.3; font-size: 16px; text-align: left; margin: 0; padding: 0;" align="left" valign="top">
                  <table class="twelve columns" style="border-spacing: 0; border-collapse: collapse; vertical-align: top; text-align: left; width: 580px; margin: 0 auto; padding: 0;">
                    <tr style="vertical-align: top; text-align: left; padding: 0;" align="left">
                      <td style="word-break: break-word; -webkit-hyphens: none; -moz-hyphens: none; hyphens: none; border-collapse: collapse !important; color: #39354e; font-family: Arial, sans-serif; font-weight: normal; line-height: 1.3; font-size: 16px; text-align: left; margin: 0; padding: 0 20px 10px;" align="left" valign="top">
                        <p style="text-align: center; color: #39354e; font-family: Arial, sans-serif; font-weight: normal; font-size: 16px; line-height: 1.3; margin: 0 0 10px; padding: 0;" align="center"><span style="font-size: 13px;">–ï—Å–ª–∏ –≤—ã –Ω–µ –æ—Ñ–æ—Ä–º–ª—è–ª–∏ –∑–∞–∫–∞–∑ –Ω–∞ –Ω–∞—à–µ–º —Å–∞–π—Ç–µ, –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä—É–π—Ç–µ —ç—Ç–æ –ø–∏—Å—å–º–æ.</span></p>
                      </td>
                    </tr>
                  </table>
                </td>
              </tr>
            </table>
            <table style="width: 100%; border-spacing: 0; border-collapse: collapse; vertical-align: top; text-align: left; padding: 0;">
              <tbody><tr style="vertical-align: top; text-align: left; padding: 0;" align="left"><td class="" style="font-size: 1px; line-height: 0; word-break: break-word; -webkit-hyphens: none; -moz-hyphens: none; hyphens: none; border-collapse: collapse !important; vertical-align: top; text-align: left; width: 100%; color: #39354e; font-family: Arial, sans-serif; font-weight: normal; background: transparent repeat center center; margin: 0; padding: 61px 0px 0px;" align="left" bgcolor="transparent" valign="top">&nbsp;</td>
              </tr></tbody></table>
              <table class="table-block" width="100%" style="border-spacing: 0; border-collapse: collapse; vertical-align: top; text-align: left; padding: 0;">
                <tbody><tr style="vertical-align: top; text-align: left; padding: 0;" align="left">
                  <td class="" style="word-break: break-word; -webkit-hyphens: none; -moz-hyphens: none; hyphens: none; border-collapse: collapse !important; vertical-align: top; text-align: left; width: 100%; color: #39354e; font-family: Arial, sans-serif; font-weight: normal; font-size: 16px; background: #ffffff repeat center center; margin: 0; padding: 0px 20px;" align="left" bgcolor="#ffffff" valign="top">
                  <p style="text-align: left; color: #39354e; font-family: Arial, sans-serif; font-weight: normal; font-size: 16px; line-height: 1.3; margin: 0 0 10px; padding: 0;" align="left">–° –Ω–∞–∏–ª—É—á—à–∏–º–∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è–º–∏,<br><span style="color: #f5b333;"><strong>MFC Foods</strong></span></p>
                  </td>
                </tr>
                </tbody></table>
              <table class="table-full" style="border-spacing: 0; border-collapse: collapse; vertical-align: top; text-align: left; background: transparent repeat center center; padding: 0;" width="100%" bgcolor="transparent">
                <tbody>
                  <tr style="vertical-align: top; text-align: left; padding: 0;" align="left">
                    <td height="100%" style="background-color: transparent; width: 86.31047227926078% !important; height: 100% !important; word-break: break-word; -webkit-hyphens: none; -moz-hyphens: none; hyphens: none; border-collapse: collapse !important; vertical-align: top; text-align: left; color: #39354e; font-family: Arial, sans-serif; font-weight: normal; font-size: 16px; margin: 0; padding: 0;" width="86.31047227926078%" align="left" bgcolor="transparent" valign="top">
                      <table class="table-block" width="100%" style="border-spacing: 0; border-collapse: collapse; vertical-align: top; text-align: left; padding: 0;">
                        <tbody><tr style="vertical-align: top; text-align: left; padding: 0;" align="left">
                          <td class="" style="word-break: break-word; -webkit-hyphens: none; -moz-hyphens: none; hyphens: none; border-collapse: collapse !important; vertical-align: top; text-align: left; width: 100%; color: #39354e; font-family: Arial, sans-serif; font-weight: normal; font-size: 16px; background: transparent repeat center center; margin: 0; padding: 10px 10px 0px 20px;" align="left" bgcolor="transparent" valign="top">
                          <p style="color: #39354e; font-family: Arial, sans-serif; font-weight: normal; font-size: 16px; text-align: left; line-height: 1.3; margin: 0 0 10px; padding: 0;" align="left"><span style="font-size: 13px;">–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã, –º—ã –±—É–¥–µ–º —Ä–∞–¥—ã –≤–∞–º –ø–æ–º–æ—á—å: deposite@ucg.ru</span></p>
                          </td>
                        </tr>
                        </tbody></table>
                      <table style="width: 100%; border-spacing: 0; border-collapse: collapse; vertical-align: top; text-align: left; padding: 0;">
                        <tbody><tr style="vertical-align: top; text-align: left; padding: 0;" align="left"><td class="" style="font-size: 1px; line-height: 0; word-break: break-word; -webkit-hyphens: none; -moz-hyphens: none; hyphens: none; border-collapse: collapse !important; vertical-align: top; text-align: left; width: 100%; color: #39354e; font-family: Arial, sans-serif; font-weight: normal; background: transparent repeat center center; margin: 0; padding: 28px 0px 0px;" align="left" bgcolor="transparent" valign="top">&nbsp;</td>
                        </tr></tbody></table>
                      <table width="100%" style="border-spacing: 0; border-collapse: collapse; vertical-align: top; text-align: left; padding: 0;">
                        <tbody><tr style="vertical-align: top; text-align: left; padding: 0;" align="left">
                          <td style="word-break: break-word; -webkit-hyphens: none; -moz-hyphens: none; hyphens: none; border-collapse: collapse !important; vertical-align: top; text-align: left; width: 100%; color: #39354e; font-family: Arial, sans-serif; font-weight: normal; font-size: 16px; margin: 0; padding: 0px;" align="left" valign="top">
                          <hr class="" style="color: #d9d9d9; background-color: #d9d9d9; height: 1px; border: none;">
                          </td>
                        </tr>
                        </tbody></table>
                    </td>
                  </tr>
                </tbody></table>
              <table class="table-full" style="border-spacing: 0; border-collapse: collapse; vertical-align: top; text-align: left; background: transparent repeat center center; padding: 0;" width="100%" bgcolor="transparent">
                <tbody>
                  <tr style="vertical-align: top; text-align: left; padding: 0;" align="left">
                    <td height="100%" style="background-color: transparent; width: 37.22221115241636% !important; height: 100% !important; word-break: break-word; -webkit-hyphens: none; -moz-hyphens: none; hyphens: none; border-collapse: collapse !important; vertical-align: top; text-align: left; color: #39354e; font-family: Arial, sans-serif; font-weight: normal; font-size: 16px; margin: 0; padding: 0;" width="37.22221115241636%" align="left" bgcolor="transparent" valign="top">
                      <table align="left" style="border-collapse: collapse; border-spacing: 0; overflow: hidden; width: 100%; vertical-align: top; text-align: left; padding: 0; border: 0;">
                        <tbody><tr style="vertical-align: top; text-align: left; padding: 0;" align="left">
                          <td align="left" style="text-align: left; word-break: break-word; -webkit-hyphens: none; -moz-hyphens: none; hyphens: none; border-collapse: collapse !important; vertical-align: top; width: 100%; color: #39354e; font-family: Arial, sans-serif; font-weight: normal; font-size: 16px; margin: 0; padding: 0px 0px 0px 20px;" valign="top">
                          <!--[if mso]>
                          <!-- --- –û–ë–ù–û–í–õ–ï–ù–ò–ï: CID —Å—Å—ã–ª–∫–∞ –¥–ª—è logo2 –≤ —É—Å–ª–æ–≤–Ω—ã—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è—Ö Outlook --->
                          <img alt='–ë–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞.png' src='cid:logo2' width='160'>
                          <![endif]-->
                          <!--[if !mso]> <!---->
                          <!-- --- –û–ë–ù–û–í–õ–ï–ù–ò–ï: CID —Å—Å—ã–ª–∫–∞ –¥–ª—è logo2 --->
                          <!-- ---img alt="–ë–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞.png" class="left" height="31" src="cid:logo2" style="width: 160px !important; height: 31px; outline: none; text-decoration: none; -ms-interpolation-mode: bicubic; max-width: 100%; float: left; clear: both; display: block;" width="160" align="left" --->
                          <!-- <![endif]-->
                          </td>
                        </tr>
                        </tbody></table>
                    </td>
                    <td height="100%" style="background-color: transparent; width: 62.7777963099631% !important; height: 100% !important; word-break: break-word; -webkit-hyphens: none; -moz-hyphens: none; hyphens: none; border-collapse: collapse !important; vertical-align: top; text-align: left; color: #39354e; font-family: Arial, sans-serif; font-weight: normal; font-size: 16px; margin: 0; padding: 0;" width="62.7777963099631%" align="left" bgcolor="transparent" valign="top">
                      <table class="table-block" width="100%" style="border-spacing: 0; border-collapse: collapse; vertical-align: top; text-align: left; padding: 0;">
                        <tbody><tr style="vertical-align: top; text-align: left; padding: 0;" align="left">
                          <td class="" style="word-break: break-word; -webkit-hyphens: none; -moz-hyphens: none; hyphens: none; border-collapse: collapse !important; vertical-align: top; text-align: left; width: 100%; color: #39354e; font-family: Arial, sans-serif; font-weight: normal; font-size: 16px; background: transparent repeat center center; margin: 0; padding: 0px 10px;" align="left" bgcolor="transparent" valign="top">
                          <p style="color: #39354e; font-family: Arial, sans-serif; font-weight: normal; font-size: 16px; text-align: left; line-height: 1.3; margin: 0 0 10px; padding: 0;" align="left"><span style="line-height: 8px; font-size: 8px;">–û–û–û "–≠–ú–≠–§–°–ò"&nbsp; –ò–ù–ù 7714867426,&nbsp; –û–ì–†–ù 1127746192716&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span style="font-size: 8px; background-color: transparent;"><br>127018, –†–æ—Å—Å–∏—è, –≥. –ú–æ—Å–∫–≤–∞, —É–ª. –î–≤–∏–Ω—Ü–µ–≤, –¥.12, –∫–æ—Ä–ø. 1, 1 —ç—Ç–∞–∂, –ü–æ–º.I, –∫–æ–º. 30–∞</span></p>
                          </td>
                        </tr>
                        </tbody></table>
                    </td>
                  </tr>
                </tbody></table>
          </td>
        </tr>
      </table>
    </center>
  </td>
</tr>
</table>
</body>
</html>
"""
            # 4. –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            # --- –û–ë–ù–û–í–õ–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º 'related' –¥–ª—è –≤—Å—Ç—Ä–∞–∏–≤–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π ---
            msg = MIMEMultipart('related') 
            # –¢–µ–º–∞ –ø–∏—Å—å–º–∞
            msg['Subject'] = f"–°—á—ë—Ç –Ω–∞ –æ–ø–ª–∞—Ç—É –∑–∞–∫–∞–∑–∞ ‚Ññ {order_id_int}"
            # –û—Ç –∫–æ–≥–æ (–∏—Å–ø–æ–ª—å–∑—É–µ–º sender_email –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞)
            if mail_config['sender_email']:
                 msg['From'] = f"{mail_config['sender_name']} <{mail_config['sender_email']}>"
            else:
                 # –ï—Å–ª–∏ sender_email –Ω–µ –∑–∞–¥–∞–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ª—é–±–æ–π, –Ω–∞–ø—Ä–∏–º–µ—Ä, –ª–æ–≥–∏–Ω —Å–∏—Å—Ç–µ–º—ã –∏–ª–∏ –∑–∞—Ö–∞—Ä–¥–∫–æ–¥–∏—Ç—å
                 # msg['From'] = "noreply@yourcompany.com" # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à —Ä–µ–∞–ª—å–Ω—ã–π –∞–¥—Ä–µ—Å
                 msg['From'] = "OrderSystem <ordersystem@yourcompany.com>" # –ü—Ä–∏–º–µ—Ä
            # –ö–æ–º—É
            msg['To'] = client_email
            # 5. –î–æ–±–∞–≤–ª—è–µ–º HTML-—á–∞—Å—Ç—å
            msg_html = MIMEText(html_body, 'html', 'utf-8')
            msg.attach(msg_html)
            # 6. --- –ù–û–í–û–ï: –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–∞–∫ –≤–ª–æ–∂–µ–Ω–∏—è ---
            script_dir = os.path.dirname(os.path.abspath(__file__)) # –ü—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å–∫—Ä–∏–ø—Ç–∞
            # --- –î–æ–±–∞–≤–ª—è–µ–º logo1.png ---
            logo1_path = os.path.join(script_dir, 'logo1.png')
            if os.path.exists(logo1_path):
                with open(logo1_path, 'rb') as f:
                    img1 = MIMEImage(f.read())
                    img1.add_header('Content-ID', '<logo1>')
                    img1.add_header('Content-Disposition', 'inline', filename='logo1.png')
                    msg.attach(img1)
                logging.debug(f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ {logo1_path} –¥–æ–±–∞–≤–ª–µ–Ω–æ –∫–∞–∫ –≤–ª–æ–∂–µ–Ω–∏–µ CID:logo1")
            else:
                logging.warning(f"–§–∞–π–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è {logo1_path} –Ω–µ –Ω–∞–π–¥–µ–Ω. –õ–æ–≥–æ—Ç–∏–ø –Ω–µ –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è.")
            # --- –î–æ–±–∞–≤–ª—è–µ–º logo2.png ---
            logo2_path = os.path.join(script_dir, 'logo2.png')
            if os.path.exists(logo2_path):
                with open(logo2_path, 'rb') as f:
                    img2 = MIMEImage(f.read())
                    img2.add_header('Content-ID', '<logo2>')
                    img2.add_header('Content-Disposition', 'inline', filename='logo2.png')
                    msg.attach(img2)
                logging.debug(f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ {logo2_path} –¥–æ–±–∞–≤–ª–µ–Ω–æ –∫–∞–∫ –≤–ª–æ–∂–µ–Ω–∏–µ CID:logo2")
            else:
                logging.warning(f"–§–∞–π–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è {logo2_path} –Ω–µ –Ω–∞–π–¥–µ–Ω. –õ–æ–≥–æ—Ç–∏–ø –Ω–µ –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è.")
            # 7. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º QR-–∫–æ–¥ (–∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–æ, –∫–∞–∫ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª–µ)
            #qr_img_buffer = BytesIO()
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º URL —Å /q –¥–ª—è QR-–∫–æ–¥–∞
            #qr = qrcode.QRCode(version=1, box_size=10, border=5)
            #qr.add_data(payment_url_qr) 
            #qr.make(fit=True)
            #img = qr.make_image(fill_color="black", back_color="white")
            #img.save(qr_img_buffer, format='PNG')
            #qr_img_buffer.seek(0)
            # 8. –î–æ–±–∞–≤–ª—è–µ–º QR-–∫–æ–¥ –∫–∞–∫ –≤–ª–æ–∂–µ–Ω–∏–µ (–∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–æ, –∫–∞–∫ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª–µ)
            #msg_image = MIMEImage(qr_img_buffer.read())
            #msg_image.add_header('Content-ID', '<qrcode>')
            #msg_image.add_header('Content-Disposition', 'inline', filename='qrcode.png')
            #msg.attach(msg_image)
            # 9. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–∏—Å—å–º–æ
            logging.info(f"–ù–∞—á–∏–Ω–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É email –¥–ª—è –∑–∞–∫–∞–∑–∞ {order_id_int} –Ω–∞ {client_email}...")
            server = None
            try:
                # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ SMTP —Å–µ—Ä–≤–µ—Ä—É
                server = smtplib.SMTP(self.config['MAIL']['smtp_server'], self.config['MAIL']['smtp_port'])
                logging.debug(f"–ü–æ–¥–∫–ª—é—á–∏–ª–∏—Å—å –∫ SMTP —Å–µ—Ä–≤–µ—Ä—É {self.config['MAIL']['smtp_server']}:{self.config['MAIL']['smtp_port']}")
                # –í–∫–ª—é—á–∞–µ–º TLS, –µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è (—Ä–µ–¥–∫–æ –¥–ª—è –ø–æ—Ä—Ç–∞ 25)
                if self.config['MAIL']['use_tls']:
                    server.starttls()
                    logging.debug("TLS –≤–∫–ª—é—á–µ–Ω.")
                # –õ–æ–≥–∏–Ω–∏–º—Å—è –¢–û–õ–¨–ö–û –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω –ø–∞—Ä–æ–ª—å
                # –î–ª—è Exchange 2019 —á–µ—Ä–µ–∑ –ø–æ—Ä—Ç 25 –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —á–∞—Å—Ç–æ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è
                if self.config['MAIL']['sender_password']: # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–∞—Ä–æ–ª—å
                    server.login(self.config['MAIL']['sender_email'], self.config['MAIL']['sender_password'])
                    logging.debug("–£—Å–ø–µ—à–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –Ω–∞ SMTP —Å–µ—Ä–≤–µ—Ä–µ.")
                else:
                    logging.debug("–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è –∏–ª–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞.")
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–∏—Å—å–º–æ
                # –ï—Å–ª–∏ From –Ω–µ –±—ã–ª —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ, –º–æ–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –µ–≥–æ –∑–¥–µ—Å—å —è–≤–Ω–æ
                # server.sendmail("ordersystem@yourcompany.com", client_email, msg.as_string())
                server.sendmail(msg['From'], client_email, msg.as_string()) 
                logging.info(f"Email —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –¥–ª—è –∑–∞–∫–∞–∑–∞ {order_id_int} –Ω–∞ {client_email}.")
                self.log_to_widget(f"üìß –ü–∏—Å—å–º–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∫–ª–∏–µ–Ω—Ç—É {client_name} ({client_email})")
                return True
            except smtplib.SMTPAuthenticationError as auth_err:
                error_msg = f"–û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ SMTP –¥–ª—è {self.config['MAIL']['sender_email']}: {auth_err}"
                logging.error(error_msg)
                self.log_to_widget(f"‚ùå –û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ SMTP: {auth_err}")
                return False
            except smtplib.SMTPRecipientsRefused as recip_err:
                error_msg = f"SMTP –æ—Ç–∫–ª–æ–Ω–∏–ª –∞–¥—Ä–µ—Å –ø–æ–ª—É—á–∞—Ç–µ–ª—è {client_email}: {recip_err}"
                logging.error(error_msg)
                self.log_to_widget(f"‚ùå –û—à–∏–±–∫–∞ SMTP (–ø–æ–ª—É—á–∞—Ç–µ–ª—å): {recip_err}")
                return False
            except smtplib.SMTPException as smtp_err:
                error_msg = f"–û—à–∏–±–∫–∞ SMTP –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞ {client_email}: {smtp_err}"
                logging.error(error_msg)
                self.log_to_widget(f"‚ùå –û—à–∏–±–∫–∞ SMTP: {smtp_err}")
                return False
            except Exception as e:
                error_msg = f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ email –Ω–∞ {client_email}: {e}"
                logging.error(error_msg, exc_info=True)
                self.log_to_widget(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ email: {e}")
                return False
            finally:
                if server:
                    try:
                        server.quit()
                        logging.debug("–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å SMTP —Å–µ—Ä–≤–µ—Ä–æ–º –∑–∞–∫—Ä—ã—Ç–æ.")
                    except:
                        pass # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –∑–∞–∫—Ä—ã—Ç–∏—è
        except Exception as e:
            error_msg = f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ send_payment_email –¥–ª—è –∑–∞–∫–∞–∑–∞ {order_id_int}: {e}"
            logging.error(error_msg, exc_info=True)
            self.log_to_widget(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ email: {e}")
            return False

# --- –ó–∞–ø—É—Å–∫ ---
if __name__ == "__main__":
    logging.info("–ó–∞–ø—É—Å–∫ –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...")
    try:
        root = tk.Tk()
        app = CombinedApp(root)
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ GUI
        if not app.conn:
            messagebox.showerror("‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ conf.ini.")
        root.mainloop()
        logging.info("–ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ.")
    except Exception as e:
        logging.critical(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ: {e}")
        messagebox.showerror("‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞", f"–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª–æ—Å—å:\n{e}")
